/* automatically generated by rust-bindgen 0.72.0 */

pub const _GLIBCXX_CSTDINT: u32 = 1;
pub const _CPP_CPPCONFIG_WRAPPER: u32 = 1;
pub const __WORDSIZE: u32 = 64;
pub const __WORDSIZE_TIME64_COMPAT32: u32 = 1;
pub const __SYSCALL_WORDSIZE: u32 = 64;
pub const _GLIBCXX_CXX_CONFIG_H: u32 = 1;
pub const _GLIBCXX_RELEASE: u32 = 15;
pub const __GLIBCXX__: u32 = 20250714;
pub const _GLIBCXX_HAVE_ATTRIBUTE_VISIBILITY: u32 = 1;
pub const _GLIBCXX_USE_DEPRECATED: u32 = 1;
pub const _GLIBCXX_EXTERN_TEMPLATE: u32 = 1;
pub const _GLIBCXX_USE_DUAL_ABI: u32 = 1;
pub const _GLIBCXX_USE_CXX11_ABI: u32 = 1;
pub const _GLIBCXX_INLINE_VERSION: u32 = 0;
pub const _GLIBCXX_HAVE_IS_CONSTANT_EVALUATED: u32 = 1;
pub const _GLIBCXX_ASSERTIONS: u32 = 1;
pub const _GLIBCXX_VERBOSE_ASSERT: u32 = 1;
pub const _GLIBCXX_USE_ALLOCATOR_NEW: u32 = 1;
pub const _GLIBCXX_OS_DEFINES: u32 = 1;
pub const __NO_CTYPE: u32 = 1;
pub const _FEATURES_H: u32 = 1;
pub const _ISOC95_SOURCE: u32 = 1;
pub const _ISOC99_SOURCE: u32 = 1;
pub const _ISOC11_SOURCE: u32 = 1;
pub const _ISOC23_SOURCE: u32 = 1;
pub const _ISOC2Y_SOURCE: u32 = 1;
pub const _POSIX_SOURCE: u32 = 1;
pub const _POSIX_C_SOURCE: u32 = 200809;
pub const _XOPEN_SOURCE: u32 = 700;
pub const _XOPEN_SOURCE_EXTENDED: u32 = 1;
pub const _LARGEFILE64_SOURCE: u32 = 1;
pub const _DEFAULT_SOURCE: u32 = 1;
pub const _ATFILE_SOURCE: u32 = 1;
pub const _DYNAMIC_STACK_SIZE_SOURCE: u32 = 1;
pub const __GLIBC_USE_ISOC2Y: u32 = 1;
pub const __GLIBC_USE_ISOC23: u32 = 1;
pub const __USE_ISOC11: u32 = 1;
pub const __USE_ISOC99: u32 = 1;
pub const __USE_ISOC95: u32 = 1;
pub const __USE_ISOCXX11: u32 = 1;
pub const __USE_POSIX: u32 = 1;
pub const __USE_POSIX2: u32 = 1;
pub const __USE_POSIX199309: u32 = 1;
pub const __USE_POSIX199506: u32 = 1;
pub const __USE_XOPEN2K: u32 = 1;
pub const __USE_XOPEN2K8: u32 = 1;
pub const __USE_XOPEN: u32 = 1;
pub const __USE_XOPEN_EXTENDED: u32 = 1;
pub const __USE_UNIX98: u32 = 1;
pub const _LARGEFILE_SOURCE: u32 = 1;
pub const __USE_XOPEN2K8XSI: u32 = 1;
pub const __USE_XOPEN2KXSI: u32 = 1;
pub const __USE_LARGEFILE: u32 = 1;
pub const __USE_LARGEFILE64: u32 = 1;
pub const __TIMESIZE: u32 = 64;
pub const __USE_TIME_BITS64: u32 = 1;
pub const __USE_MISC: u32 = 1;
pub const __USE_ATFILE: u32 = 1;
pub const __USE_DYNAMIC_STACK_SIZE: u32 = 1;
pub const __USE_GNU: u32 = 1;
pub const __USE_FORTIFY_LEVEL: u32 = 0;
pub const __GLIBC_USE_DEPRECATED_GETS: u32 = 0;
pub const __GLIBC_USE_DEPRECATED_SCANF: u32 = 0;
pub const __GLIBC_USE_C23_STRTOL: u32 = 1;
pub const _STDC_PREDEF_H: u32 = 1;
pub const __STDC_IEC_559__: u32 = 1;
pub const __STDC_IEC_60559_BFP__: u32 = 201404;
pub const __STDC_IEC_559_COMPLEX__: u32 = 1;
pub const __STDC_IEC_60559_COMPLEX__: u32 = 201404;
pub const __STDC_ISO_10646__: u32 = 201706;
pub const __GNU_LIBRARY__: u32 = 6;
pub const __GLIBC__: u32 = 2;
pub const __GLIBC_MINOR__: u32 = 41;
pub const _SYS_CDEFS_H: u32 = 1;
pub const __glibc_c99_flexarr_available: u32 = 1;
pub const __LDOUBLE_REDIRECTS_TO_FLOAT128_ABI: u32 = 0;
pub const __HAVE_GENERIC_SELECTION: u32 = 0;
pub const _GLIBCXX_HAVE_FLOAT128_MATH: u32 = 1;
pub const _GLIBCXX_MAY_HAVE___CXA_THREAD_ATEXIT_IMPL: u32 = 1;
pub const _GLIBCXX_GTHREAD_USE_WEAK: u32 = 0;
pub const _GLIBCXX_CPU_DEFINES: u32 = 1;
pub const _GLIBCXX_FAST_MATH: u32 = 0;
pub const _GLIBCXX_USE_FLOAT128: u32 = 1;
pub const _GLIBCXX_FLOAT_IS_IEEE_BINARY32: u32 = 1;
pub const _GLIBCXX_DOUBLE_IS_IEEE_BINARY64: u32 = 1;
pub const _GLIBCXX_HAVE_BUILTIN_HAS_UNIQ_OBJ_REP: u32 = 1;
pub const _GLIBCXX_HAVE_BUILTIN_IS_AGGREGATE: u32 = 1;
pub const _GLIBCXX_HAVE_BUILTIN_LAUNDER: u32 = 1;
pub const _GLIBCXX_HAVE_ACOSF: u32 = 1;
pub const _GLIBCXX_HAVE_ACOSL: u32 = 1;
pub const _GLIBCXX_HAVE_ALIGNED_ALLOC: u32 = 1;
pub const _GLIBCXX_HAVE_ARC4RANDOM: u32 = 1;
pub const _GLIBCXX_HAVE_ARPA_INET_H: u32 = 1;
pub const _GLIBCXX_HAVE_ASINF: u32 = 1;
pub const _GLIBCXX_HAVE_ASINL: u32 = 1;
pub const _GLIBCXX_HAVE_AS_SYMVER_DIRECTIVE: u32 = 1;
pub const _GLIBCXX_HAVE_ATAN2F: u32 = 1;
pub const _GLIBCXX_HAVE_ATAN2L: u32 = 1;
pub const _GLIBCXX_HAVE_ATANF: u32 = 1;
pub const _GLIBCXX_HAVE_ATANL: u32 = 1;
pub const _GLIBCXX_HAVE_ATOMIC_LOCK_POLICY: u32 = 1;
pub const _GLIBCXX_HAVE_AT_QUICK_EXIT: u32 = 1;
pub const _GLIBCXX_HAVE_C99_FLT_EVAL_TYPES: u32 = 1;
pub const _GLIBCXX_HAVE_CEILF: u32 = 1;
pub const _GLIBCXX_HAVE_CEILL: u32 = 1;
pub const _GLIBCXX_HAVE_COMPLEX_H: u32 = 1;
pub const _GLIBCXX_HAVE_COSF: u32 = 1;
pub const _GLIBCXX_HAVE_COSHF: u32 = 1;
pub const _GLIBCXX_HAVE_COSHL: u32 = 1;
pub const _GLIBCXX_HAVE_COSL: u32 = 1;
pub const _GLIBCXX_HAVE_DECL_STRNLEN: u32 = 1;
pub const _GLIBCXX_HAVE_DIRENT_H: u32 = 1;
pub const _GLIBCXX_HAVE_DIRFD: u32 = 1;
pub const _GLIBCXX_HAVE_DLFCN_H: u32 = 1;
pub const _GLIBCXX_HAVE_ENDIAN_H: u32 = 1;
pub const _GLIBCXX_HAVE_EXCEPTION_PTR_SINCE_GCC46: u32 = 1;
pub const _GLIBCXX_HAVE_EXECINFO_H: u32 = 1;
pub const _GLIBCXX_HAVE_EXPF: u32 = 1;
pub const _GLIBCXX_HAVE_EXPL: u32 = 1;
pub const _GLIBCXX_HAVE_FABSF: u32 = 1;
pub const _GLIBCXX_HAVE_FABSL: u32 = 1;
pub const _GLIBCXX_HAVE_FCNTL_H: u32 = 1;
pub const _GLIBCXX_HAVE_FDOPENDIR: u32 = 1;
pub const _GLIBCXX_HAVE_FENV_H: u32 = 1;
pub const _GLIBCXX_HAVE_FINITE: u32 = 1;
pub const _GLIBCXX_HAVE_FINITEF: u32 = 1;
pub const _GLIBCXX_HAVE_FINITEL: u32 = 1;
pub const _GLIBCXX_HAVE_FLOAT_H: u32 = 1;
pub const _GLIBCXX_HAVE_FLOORF: u32 = 1;
pub const _GLIBCXX_HAVE_FLOORL: u32 = 1;
pub const _GLIBCXX_HAVE_FMODF: u32 = 1;
pub const _GLIBCXX_HAVE_FMODL: u32 = 1;
pub const _GLIBCXX_HAVE_FREXPF: u32 = 1;
pub const _GLIBCXX_HAVE_FREXPL: u32 = 1;
pub const _GLIBCXX_HAVE_GETENTROPY: u32 = 1;
pub const _GLIBCXX_HAVE_GETIPINFO: u32 = 1;
pub const _GLIBCXX_HAVE_GETS: u32 = 1;
pub const _GLIBCXX_HAVE_HYPOT: u32 = 1;
pub const _GLIBCXX_HAVE_HYPOTF: u32 = 1;
pub const _GLIBCXX_HAVE_HYPOTL: u32 = 1;
pub const _GLIBCXX_HAVE_ICONV: u32 = 1;
pub const _GLIBCXX_HAVE_INTTYPES_H: u32 = 1;
pub const _GLIBCXX_HAVE_ISINFF: u32 = 1;
pub const _GLIBCXX_HAVE_ISINFL: u32 = 1;
pub const _GLIBCXX_HAVE_ISNANF: u32 = 1;
pub const _GLIBCXX_HAVE_ISNANL: u32 = 1;
pub const _GLIBCXX_HAVE_ISWBLANK: u32 = 1;
pub const _GLIBCXX_HAVE_LC_MESSAGES: u32 = 1;
pub const _GLIBCXX_HAVE_LDEXPF: u32 = 1;
pub const _GLIBCXX_HAVE_LDEXPL: u32 = 1;
pub const _GLIBCXX_HAVE_LIBINTL_H: u32 = 1;
pub const _GLIBCXX_HAVE_LIMIT_AS: u32 = 1;
pub const _GLIBCXX_HAVE_LIMIT_DATA: u32 = 1;
pub const _GLIBCXX_HAVE_LIMIT_FSIZE: u32 = 1;
pub const _GLIBCXX_HAVE_LIMIT_RSS: u32 = 1;
pub const _GLIBCXX_HAVE_LIMIT_VMEM: u32 = 0;
pub const _GLIBCXX_HAVE_LINK: u32 = 1;
pub const _GLIBCXX_HAVE_LINK_H: u32 = 1;
pub const _GLIBCXX_HAVE_LINUX_FUTEX: u32 = 1;
pub const _GLIBCXX_HAVE_LINUX_RANDOM_H: u32 = 1;
pub const _GLIBCXX_HAVE_LINUX_TYPES_H: u32 = 1;
pub const _GLIBCXX_HAVE_LOCALE_H: u32 = 1;
pub const _GLIBCXX_HAVE_LOG10F: u32 = 1;
pub const _GLIBCXX_HAVE_LOG10L: u32 = 1;
pub const _GLIBCXX_HAVE_LOGF: u32 = 1;
pub const _GLIBCXX_HAVE_LOGL: u32 = 1;
pub const _GLIBCXX_HAVE_LSEEK: u32 = 1;
pub const _GLIBCXX_HAVE_MBSTATE_T: u32 = 1;
pub const _GLIBCXX_HAVE_MEMALIGN: u32 = 1;
pub const _GLIBCXX_HAVE_MEMORY_H: u32 = 1;
pub const _GLIBCXX_HAVE_MODF: u32 = 1;
pub const _GLIBCXX_HAVE_MODFF: u32 = 1;
pub const _GLIBCXX_HAVE_MODFL: u32 = 1;
pub const _GLIBCXX_HAVE_NETDB_H: u32 = 1;
pub const _GLIBCXX_HAVE_NETINET_IN_H: u32 = 1;
pub const _GLIBCXX_HAVE_NETINET_TCP_H: u32 = 1;
pub const _GLIBCXX_HAVE_OPENAT: u32 = 1;
pub const _GLIBCXX_HAVE_O_NONBLOCK: u32 = 1;
pub const _GLIBCXX_HAVE_POLL: u32 = 1;
pub const _GLIBCXX_HAVE_POLL_H: u32 = 1;
pub const _GLIBCXX_HAVE_POSIX_MEMALIGN: u32 = 1;
pub const _GLIBCXX_HAVE_POSIX_SEMAPHORE: u32 = 1;
pub const _GLIBCXX_HAVE_POWF: u32 = 1;
pub const _GLIBCXX_HAVE_POWL: u32 = 1;
pub const _GLIBCXX_HAVE_QUICK_EXIT: u32 = 1;
pub const _GLIBCXX_HAVE_READLINK: u32 = 1;
pub const _GLIBCXX_HAVE_SECURE_GETENV: u32 = 1;
pub const _GLIBCXX_HAVE_SETENV: u32 = 1;
pub const _GLIBCXX_HAVE_SINCOS: u32 = 1;
pub const _GLIBCXX_HAVE_SINCOSF: u32 = 1;
pub const _GLIBCXX_HAVE_SINCOSL: u32 = 1;
pub const _GLIBCXX_HAVE_SINF: u32 = 1;
pub const _GLIBCXX_HAVE_SINHF: u32 = 1;
pub const _GLIBCXX_HAVE_SINHL: u32 = 1;
pub const _GLIBCXX_HAVE_SINL: u32 = 1;
pub const _GLIBCXX_HAVE_SOCKATMARK: u32 = 1;
pub const _GLIBCXX_HAVE_SQRTF: u32 = 1;
pub const _GLIBCXX_HAVE_SQRTL: u32 = 1;
pub const _GLIBCXX_HAVE_STACKTRACE: u32 = 1;
pub const _GLIBCXX_HAVE_STDALIGN_H: u32 = 1;
pub const _GLIBCXX_HAVE_STDBOOL_H: u32 = 1;
pub const _GLIBCXX_HAVE_STDINT_H: u32 = 1;
pub const _GLIBCXX_HAVE_STDLIB_H: u32 = 1;
pub const _GLIBCXX_HAVE_STRERROR_L: u32 = 1;
pub const _GLIBCXX_HAVE_STRERROR_R: u32 = 1;
pub const _GLIBCXX_HAVE_STRINGS_H: u32 = 1;
pub const _GLIBCXX_HAVE_STRING_H: u32 = 1;
pub const _GLIBCXX_HAVE_STRTOF: u32 = 1;
pub const _GLIBCXX_HAVE_STRTOLD: u32 = 1;
pub const _GLIBCXX_HAVE_STRUCT_DIRENT_D_TYPE: u32 = 1;
pub const _GLIBCXX_HAVE_STRXFRM_L: u32 = 1;
pub const _GLIBCXX_HAVE_SYMLINK: u32 = 1;
pub const _GLIBCXX_HAVE_SYMVER_SYMBOL_RENAMING_RUNTIME_SUPPORT: u32 = 1;
pub const _GLIBCXX_HAVE_SYS_IOCTL_H: u32 = 1;
pub const _GLIBCXX_HAVE_SYS_IPC_H: u32 = 1;
pub const _GLIBCXX_HAVE_SYS_MMAN_H: u32 = 1;
pub const _GLIBCXX_HAVE_SYS_PARAM_H: u32 = 1;
pub const _GLIBCXX_HAVE_SYS_RESOURCE_H: u32 = 1;
pub const _GLIBCXX_HAVE_SYS_SDT_H: u32 = 1;
pub const _GLIBCXX_HAVE_SYS_SEM_H: u32 = 1;
pub const _GLIBCXX_HAVE_SYS_SOCKET_H: u32 = 1;
pub const _GLIBCXX_HAVE_SYS_STATVFS_H: u32 = 1;
pub const _GLIBCXX_HAVE_SYS_STAT_H: u32 = 1;
pub const _GLIBCXX_HAVE_SYS_SYSINFO_H: u32 = 1;
pub const _GLIBCXX_HAVE_SYS_TIME_H: u32 = 1;
pub const _GLIBCXX_HAVE_SYS_TYPES_H: u32 = 1;
pub const _GLIBCXX_HAVE_SYS_UIO_H: u32 = 1;
pub const _GLIBCXX_HAVE_S_ISREG: u32 = 1;
pub const _GLIBCXX_HAVE_TANF: u32 = 1;
pub const _GLIBCXX_HAVE_TANHF: u32 = 1;
pub const _GLIBCXX_HAVE_TANHL: u32 = 1;
pub const _GLIBCXX_HAVE_TANL: u32 = 1;
pub const _GLIBCXX_HAVE_TGMATH_H: u32 = 1;
pub const _GLIBCXX_HAVE_TIMESPEC_GET: u32 = 1;
pub const _GLIBCXX_HAVE_TLS: u32 = 1;
pub const _GLIBCXX_HAVE_TRUNCATE: u32 = 1;
pub const _GLIBCXX_HAVE_UCHAR_H: u32 = 1;
pub const _GLIBCXX_HAVE_UNISTD_H: u32 = 1;
pub const _GLIBCXX_HAVE_UNLINKAT: u32 = 1;
pub const _GLIBCXX_HAVE_USELOCALE: u32 = 1;
pub const _GLIBCXX_HAVE_UTIME_H: u32 = 1;
pub const _GLIBCXX_HAVE_VFWSCANF: u32 = 1;
pub const _GLIBCXX_HAVE_VSWSCANF: u32 = 1;
pub const _GLIBCXX_HAVE_VWSCANF: u32 = 1;
pub const _GLIBCXX_HAVE_WCHAR_H: u32 = 1;
pub const _GLIBCXX_HAVE_WCSTOF: u32 = 1;
pub const _GLIBCXX_HAVE_WCTYPE_H: u32 = 1;
pub const _GLIBCXX_HAVE_WRITEV: u32 = 1;
pub const _GLIBCXX_HAVE___CXA_THREAD_ATEXIT_IMPL: u32 = 1;
pub const _GLIBCXX_LT_OBJDIR: &[u8; 7] = b".libs/\0";
pub const _GLIBCXX_PACKAGE_BUGREPORT: &[u8; 1] = b"\0";
pub const _GLIBCXX_PACKAGE_NAME: &[u8; 15] = b"package-unused\0";
pub const _GLIBCXX_PACKAGE_STRING: &[u8; 30] = b"package-unused version-unused\0";
pub const _GLIBCXX_PACKAGE_TARNAME: &[u8; 10] = b"libstdc++\0";
pub const _GLIBCXX_PACKAGE_URL: &[u8; 1] = b"\0";
pub const _GLIBCXX_PACKAGE__GLIBCXX_VERSION: &[u8; 15] = b"version-unused\0";
pub const _GLIBCXX_STDC_HEADERS: u32 = 1;
pub const _GLIBCXX_DARWIN_USE_64_BIT_INODE: u32 = 1;
pub const _GLIBCXX11_USE_C99_COMPLEX: u32 = 1;
pub const _GLIBCXX11_USE_C99_MATH: u32 = 1;
pub const _GLIBCXX11_USE_C99_STDIO: u32 = 1;
pub const _GLIBCXX11_USE_C99_STDLIB: u32 = 1;
pub const _GLIBCXX11_USE_C99_WCHAR: u32 = 1;
pub const _GLIBCXX98_USE_C99_COMPLEX: u32 = 1;
pub const _GLIBCXX98_USE_C99_MATH: u32 = 1;
pub const _GLIBCXX98_USE_C99_STDIO: u32 = 1;
pub const _GLIBCXX98_USE_C99_STDLIB: u32 = 1;
pub const _GLIBCXX98_USE_C99_WCHAR: u32 = 1;
pub const _GLIBCXX_ATOMIC_BUILTINS: u32 = 1;
pub const _GLIBCXX_CAN_ALIGNAS_DESTRUCTIVE_SIZE: u32 = 1;
pub const _GLIBCXX_FULLY_DYNAMIC_STRING: u32 = 0;
pub const _GLIBCXX_HAS_GTHREADS: u32 = 1;
pub const _GLIBCXX_RES_LIMITS: u32 = 1;
pub const _GLIBCXX_STDIO_EOF: i32 = -1;
pub const _GLIBCXX_STDIO_SEEK_CUR: u32 = 1;
pub const _GLIBCXX_STDIO_SEEK_END: u32 = 2;
pub const _GLIBCXX_SYMVER: u32 = 1;
pub const _GLIBCXX_SYMVER_GNU: u32 = 1;
pub const _GLIBCXX_USE_C11_UCHAR_CXX11: u32 = 1;
pub const _GLIBCXX_USE_C99: u32 = 1;
pub const _GLIBCXX_USE_C99_COMPLEX_ARC: u32 = 1;
pub const _GLIBCXX_USE_C99_COMPLEX_TR1: u32 = 1;
pub const _GLIBCXX_USE_C99_CTYPE: u32 = 1;
pub const _GLIBCXX_USE_C99_CTYPE_TR1: u32 = 1;
pub const _GLIBCXX_USE_C99_FENV: u32 = 1;
pub const _GLIBCXX_USE_C99_FENV_TR1: u32 = 1;
pub const _GLIBCXX_USE_C99_INTTYPES: u32 = 1;
pub const _GLIBCXX_USE_C99_INTTYPES_TR1: u32 = 1;
pub const _GLIBCXX_USE_C99_INTTYPES_WCHAR_T: u32 = 1;
pub const _GLIBCXX_USE_C99_INTTYPES_WCHAR_T_TR1: u32 = 1;
pub const _GLIBCXX_USE_C99_MATH_FUNCS: u32 = 1;
pub const _GLIBCXX_USE_C99_MATH_TR1: u32 = 1;
pub const _GLIBCXX_USE_C99_STDINT: u32 = 1;
pub const _GLIBCXX_USE_C99_STDINT_TR1: u32 = 1;
pub const _GLIBCXX_USE_CHDIR: u32 = 1;
pub const _GLIBCXX_USE_CHMOD: u32 = 1;
pub const _GLIBCXX_USE_CLOCK_MONOTONIC: u32 = 1;
pub const _GLIBCXX_USE_CLOCK_REALTIME: u32 = 1;
pub const _GLIBCXX_USE_DECIMAL_FLOAT: u32 = 1;
pub const _GLIBCXX_USE_DEV_RANDOM: u32 = 1;
pub const _GLIBCXX_USE_FCHMOD: u32 = 1;
pub const _GLIBCXX_USE_FCHMODAT: u32 = 1;
pub const _GLIBCXX_USE_FSEEKO_FTELLO: u32 = 1;
pub const _GLIBCXX_USE_GETCWD: u32 = 1;
pub const _GLIBCXX_USE_GETTIMEOFDAY: u32 = 1;
pub const _GLIBCXX_USE_GET_NPROCS: u32 = 1;
pub const _GLIBCXX_USE_INIT_PRIORITY_ATTRIBUTE: u32 = 1;
pub const _GLIBCXX_USE_LFS: u32 = 1;
pub const _GLIBCXX_USE_LONG_LONG: u32 = 1;
pub const _GLIBCXX_USE_LSTAT: u32 = 1;
pub const _GLIBCXX_USE_MKDIR: u32 = 1;
pub const _GLIBCXX_USE_NANOSLEEP: u32 = 1;
pub const _GLIBCXX_USE_NLS: u32 = 1;
pub const _GLIBCXX_USE_NL_LANGINFO_L: u32 = 1;
pub const _GLIBCXX_USE_PTHREAD_COND_CLOCKWAIT: u32 = 1;
pub const _GLIBCXX_USE_PTHREAD_RWLOCK_CLOCKLOCK: u32 = 1;
pub const _GLIBCXX_USE_PTHREAD_RWLOCK_T: u32 = 1;
pub const _GLIBCXX_USE_RANDOM_TR1: u32 = 1;
pub const _GLIBCXX_USE_REALPATH: u32 = 1;
pub const _GLIBCXX_USE_SCHED_YIELD: u32 = 1;
pub const _GLIBCXX_USE_SC_NPROCESSORS_ONLN: u32 = 1;
pub const _GLIBCXX_USE_SENDFILE: u32 = 1;
pub const _GLIBCXX_USE_STRUCT_TM_TM_ZONE: u32 = 1;
pub const _GLIBCXX_USE_ST_MTIM: u32 = 1;
pub const _GLIBCXX_USE_TMPNAM: u32 = 1;
pub const _GLIBCXX_USE_UCHAR_C8RTOMB_MBRTOC8_CXX20: u32 = 1;
pub const _GLIBCXX_USE_UCHAR_C8RTOMB_MBRTOC8_FCHAR8_T: u32 = 1;
pub const _GLIBCXX_USE_UTIME: u32 = 1;
pub const _GLIBCXX_USE_UTIMENSAT: u32 = 1;
pub const _GLIBCXX_USE_WCHAR_T: u32 = 1;
pub const _GLIBCXX_VERBOSE: u32 = 1;
pub const _GLIBCXX_X86_RDRAND: u32 = 1;
pub const _GLIBCXX_X86_RDSEED: u32 = 1;
pub const _GLIBCXX_ZONEINFO_DIR: &[u8; 20] = b"/usr/share/zoneinfo\0";
pub const _GTHREAD_USE_MUTEX_TIMEDLOCK: u32 = 1;
pub const _STDINT_H: u32 = 1;
pub const __GLIBC_USE_LIB_EXT2: u32 = 1;
pub const __GLIBC_USE_IEC_60559_BFP_EXT: u32 = 1;
pub const __GLIBC_USE_IEC_60559_BFP_EXT_C23: u32 = 1;
pub const __GLIBC_USE_IEC_60559_EXT: u32 = 1;
pub const __GLIBC_USE_IEC_60559_FUNCS_EXT: u32 = 1;
pub const __GLIBC_USE_IEC_60559_FUNCS_EXT_C23: u32 = 1;
pub const __GLIBC_USE_IEC_60559_TYPES_EXT: u32 = 1;
pub const _BITS_TYPES_H: u32 = 1;
pub const _BITS_TYPESIZES_H: u32 = 1;
pub const __OFF_T_MATCHES_OFF64_T: u32 = 1;
pub const __INO_T_MATCHES_INO64_T: u32 = 1;
pub const __RLIM_T_MATCHES_RLIM64_T: u32 = 1;
pub const __STATFS_MATCHES_STATFS64: u32 = 1;
pub const __KERNEL_OLD_TIMEVAL_MATCHES_TIMEVAL64: u32 = 1;
pub const __FD_SETSIZE: u32 = 1024;
pub const _BITS_TIME64_H: u32 = 1;
pub const _BITS_WCHAR_H: u32 = 1;
pub const _BITS_STDINT_INTN_H: u32 = 1;
pub const _BITS_STDINT_UINTN_H: u32 = 1;
pub const _BITS_STDINT_LEAST_H: u32 = 1;
pub const INT8_MIN: i32 = -128;
pub const INT16_MIN: i32 = -32768;
pub const INT32_MIN: i32 = -2147483648;
pub const INT8_MAX: u32 = 127;
pub const INT16_MAX: u32 = 32767;
pub const INT32_MAX: u32 = 2147483647;
pub const UINT8_MAX: u32 = 255;
pub const UINT16_MAX: u32 = 65535;
pub const UINT32_MAX: u32 = 4294967295;
pub const INT_LEAST8_MIN: i32 = -128;
pub const INT_LEAST16_MIN: i32 = -32768;
pub const INT_LEAST32_MIN: i32 = -2147483648;
pub const INT_LEAST8_MAX: u32 = 127;
pub const INT_LEAST16_MAX: u32 = 32767;
pub const INT_LEAST32_MAX: u32 = 2147483647;
pub const UINT_LEAST8_MAX: u32 = 255;
pub const UINT_LEAST16_MAX: u32 = 65535;
pub const UINT_LEAST32_MAX: u32 = 4294967295;
pub const INT_FAST8_MIN: i32 = -128;
pub const INT_FAST16_MIN: i64 = -9223372036854775808;
pub const INT_FAST32_MIN: i64 = -9223372036854775808;
pub const INT_FAST8_MAX: u32 = 127;
pub const INT_FAST16_MAX: u64 = 9223372036854775807;
pub const INT_FAST32_MAX: u64 = 9223372036854775807;
pub const UINT_FAST8_MAX: u32 = 255;
pub const UINT_FAST16_MAX: i32 = -1;
pub const UINT_FAST32_MAX: i32 = -1;
pub const INTPTR_MIN: i64 = -9223372036854775808;
pub const INTPTR_MAX: u64 = 9223372036854775807;
pub const UINTPTR_MAX: i32 = -1;
pub const PTRDIFF_MIN: i64 = -9223372036854775808;
pub const PTRDIFF_MAX: u64 = 9223372036854775807;
pub const SIG_ATOMIC_MIN: i32 = -2147483648;
pub const SIG_ATOMIC_MAX: u32 = 2147483647;
pub const SIZE_MAX: i32 = -1;
pub const WINT_MIN: u32 = 0;
pub const WINT_MAX: u32 = 4294967295;
pub const INT8_WIDTH: u32 = 8;
pub const UINT8_WIDTH: u32 = 8;
pub const INT16_WIDTH: u32 = 16;
pub const UINT16_WIDTH: u32 = 16;
pub const INT32_WIDTH: u32 = 32;
pub const UINT32_WIDTH: u32 = 32;
pub const INT64_WIDTH: u32 = 64;
pub const UINT64_WIDTH: u32 = 64;
pub const INT_LEAST8_WIDTH: u32 = 8;
pub const UINT_LEAST8_WIDTH: u32 = 8;
pub const INT_LEAST16_WIDTH: u32 = 16;
pub const UINT_LEAST16_WIDTH: u32 = 16;
pub const INT_LEAST32_WIDTH: u32 = 32;
pub const UINT_LEAST32_WIDTH: u32 = 32;
pub const INT_LEAST64_WIDTH: u32 = 64;
pub const UINT_LEAST64_WIDTH: u32 = 64;
pub const INT_FAST8_WIDTH: u32 = 8;
pub const UINT_FAST8_WIDTH: u32 = 8;
pub const INT_FAST16_WIDTH: u32 = 64;
pub const UINT_FAST16_WIDTH: u32 = 64;
pub const INT_FAST32_WIDTH: u32 = 64;
pub const UINT_FAST32_WIDTH: u32 = 64;
pub const INT_FAST64_WIDTH: u32 = 64;
pub const UINT_FAST64_WIDTH: u32 = 64;
pub const INTPTR_WIDTH: u32 = 64;
pub const UINTPTR_WIDTH: u32 = 64;
pub const INTMAX_WIDTH: u32 = 64;
pub const UINTMAX_WIDTH: u32 = 64;
pub const PTRDIFF_WIDTH: u32 = 64;
pub const SIG_ATOMIC_WIDTH: u32 = 32;
pub const SIZE_WIDTH: u32 = 64;
pub const WCHAR_WIDTH: u32 = 32;
pub const WINT_WIDTH: u32 = 32;
pub const _GLIBCXX_CSTDDEF: u32 = 1;
pub const __glibcxx_incomplete_container_elements: u32 = 201505;
pub const __glibcxx_allocator_traits_is_always_equal: u32 = 201411;
pub const __glibcxx_is_null_pointer: u32 = 201309;
pub const __glibcxx_result_of_sfinae: u32 = 201210;
pub const __glibcxx_shared_ptr_arrays: u32 = 201611;
pub const __glibcxx_math_spec_funcs: u32 = 201003;
pub const __glibcxx_exchange_function: u32 = 201304;
pub const __glibcxx_integer_sequence: u32 = 201304;
pub const __glibcxx_integral_constant_callable: u32 = 201304;
pub const __glibcxx_is_final: u32 = 201402;
pub const __glibcxx_make_reverse_iterator: u32 = 201402;
pub const __glibcxx_null_iterators: u32 = 201304;
pub const __glibcxx_transformation_trait_aliases: u32 = 201304;
pub const __glibcxx_transparent_operators: u32 = 201510;
pub const __glibcxx_tuple_element_t: u32 = 201402;
pub const __glibcxx_tuples_by_type: u32 = 201304;
pub const __glibcxx_robust_nonmodifying_seq_ops: u32 = 201304;
pub const __glibcxx_to_chars: u32 = 201611;
pub const __glibcxx_chrono_udls: u32 = 201304;
pub const __glibcxx_complex_udls: u32 = 201309;
pub const __glibcxx_generic_associative_lookup: u32 = 201304;
pub const __glibcxx_make_unique: u32 = 201304;
pub const __glibcxx_quoted_string_io: u32 = 201304;
pub const __glibcxx_shared_timed_mutex: u32 = 201402;
pub const __glibcxx_string_udls: u32 = 201304;
pub const NRD_VERSION_MAJOR: u32 = 4;
pub const NRD_VERSION_MINOR: u32 = 15;
pub const NRD_VERSION_BUILD: u32 = 2;
pub const NRD_VERSION_DATE: &[u8; 13] = b"29 July 2025\0";
pub const NRD_DESCS_VERSION_MAJOR: u32 = 4;
pub const NRD_DESCS_VERSION_MINOR: u32 = 15;
pub const NRD_SETTINGS_VERSION_MAJOR: u32 = 4;
pub const NRD_SETTINGS_VERSION_MINOR: u32 = 15;
pub type std_nullptr_t = *const ::std::os::raw::c_void;
unsafe extern "C" {
    #[link_name = "\u{1}_ZSt21__glibcxx_assert_failPKciS0_S0_"]
    pub fn std___glibcxx_assert_fail(
        __file: *const ::std::os::raw::c_char,
        __line: ::std::os::raw::c_int,
        __function: *const ::std::os::raw::c_char,
        __condition: *const ::std::os::raw::c_char,
    ) -> !;
}
pub type __u_char = ::std::os::raw::c_uchar;
pub type __u_short = ::std::os::raw::c_ushort;
pub type __u_int = ::std::os::raw::c_uint;
pub type __u_long = ::std::os::raw::c_ulong;
pub type __int8_t = ::std::os::raw::c_schar;
pub type __uint8_t = ::std::os::raw::c_uchar;
pub type __int16_t = ::std::os::raw::c_short;
pub type __uint16_t = ::std::os::raw::c_ushort;
pub type __int32_t = ::std::os::raw::c_int;
pub type __uint32_t = ::std::os::raw::c_uint;
pub type __int64_t = ::std::os::raw::c_long;
pub type __uint64_t = ::std::os::raw::c_ulong;
pub type __int_least8_t = __int8_t;
pub type __uint_least8_t = __uint8_t;
pub type __int_least16_t = __int16_t;
pub type __uint_least16_t = __uint16_t;
pub type __int_least32_t = __int32_t;
pub type __uint_least32_t = __uint32_t;
pub type __int_least64_t = __int64_t;
pub type __uint_least64_t = __uint64_t;
pub type __quad_t = ::std::os::raw::c_long;
pub type __u_quad_t = ::std::os::raw::c_ulong;
pub type __intmax_t = ::std::os::raw::c_long;
pub type __uintmax_t = ::std::os::raw::c_ulong;
pub type __dev_t = ::std::os::raw::c_ulong;
pub type __uid_t = ::std::os::raw::c_uint;
pub type __gid_t = ::std::os::raw::c_uint;
pub type __ino_t = ::std::os::raw::c_ulong;
pub type __ino64_t = ::std::os::raw::c_ulong;
pub type __mode_t = ::std::os::raw::c_uint;
pub type __nlink_t = ::std::os::raw::c_ulong;
pub type __off_t = ::std::os::raw::c_long;
pub type __off64_t = ::std::os::raw::c_long;
pub type __pid_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __fsid_t {
    pub __val: [::std::os::raw::c_int; 2usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __fsid_t"][::std::mem::size_of::<__fsid_t>() - 8usize];
    ["Alignment of __fsid_t"][::std::mem::align_of::<__fsid_t>() - 4usize];
    ["Offset of field: __fsid_t::__val"][::std::mem::offset_of!(__fsid_t, __val) - 0usize];
};
pub type __clock_t = ::std::os::raw::c_long;
pub type __rlim_t = ::std::os::raw::c_ulong;
pub type __rlim64_t = ::std::os::raw::c_ulong;
pub type __id_t = ::std::os::raw::c_uint;
pub type __time_t = ::std::os::raw::c_long;
pub type __useconds_t = ::std::os::raw::c_uint;
pub type __suseconds_t = ::std::os::raw::c_long;
pub type __suseconds64_t = ::std::os::raw::c_long;
pub type __daddr_t = ::std::os::raw::c_int;
pub type __key_t = ::std::os::raw::c_int;
pub type __clockid_t = ::std::os::raw::c_int;
pub type __timer_t = *mut ::std::os::raw::c_void;
pub type __blksize_t = ::std::os::raw::c_long;
pub type __blkcnt_t = ::std::os::raw::c_long;
pub type __blkcnt64_t = ::std::os::raw::c_long;
pub type __fsblkcnt_t = ::std::os::raw::c_ulong;
pub type __fsblkcnt64_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt64_t = ::std::os::raw::c_ulong;
pub type __fsword_t = ::std::os::raw::c_long;
pub type __ssize_t = ::std::os::raw::c_long;
pub type __syscall_slong_t = ::std::os::raw::c_long;
pub type __syscall_ulong_t = ::std::os::raw::c_ulong;
pub type __loff_t = __off64_t;
pub type __caddr_t = *mut ::std::os::raw::c_char;
pub type __intptr_t = ::std::os::raw::c_long;
pub type __socklen_t = ::std::os::raw::c_uint;
pub type __sig_atomic_t = ::std::os::raw::c_int;
pub type int_least8_t = __int_least8_t;
pub type int_least16_t = __int_least16_t;
pub type int_least32_t = __int_least32_t;
pub type int_least64_t = __int_least64_t;
pub type uint_least8_t = __uint_least8_t;
pub type uint_least16_t = __uint_least16_t;
pub type uint_least32_t = __uint_least32_t;
pub type uint_least64_t = __uint_least64_t;
pub type int_fast8_t = ::std::os::raw::c_schar;
pub type int_fast16_t = ::std::os::raw::c_long;
pub type int_fast32_t = ::std::os::raw::c_long;
pub type int_fast64_t = ::std::os::raw::c_long;
pub type uint_fast8_t = ::std::os::raw::c_uchar;
pub type uint_fast16_t = ::std::os::raw::c_ulong;
pub type uint_fast32_t = ::std::os::raw::c_ulong;
pub type uint_fast64_t = ::std::os::raw::c_ulong;
pub type intmax_t = __intmax_t;
pub type uintmax_t = __uintmax_t;
#[repr(C)]
#[repr(align(16))]
#[derive(Debug, Copy, Clone)]
pub struct max_align_t {
    pub __clang_max_align_nonce1: ::std::os::raw::c_longlong,
    pub __bindgen_padding_0: u64,
    pub __clang_max_align_nonce2: u128,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of max_align_t"][::std::mem::size_of::<max_align_t>() - 32usize];
    ["Alignment of max_align_t"][::std::mem::align_of::<max_align_t>() - 16usize];
    ["Offset of field: max_align_t::__clang_max_align_nonce1"]
        [::std::mem::offset_of!(max_align_t, __clang_max_align_nonce1) - 0usize];
    ["Offset of field: max_align_t::__clang_max_align_nonce2"]
        [::std::mem::offset_of!(max_align_t, __clang_max_align_nonce2) - 16usize];
};
pub type nrd_Identifier = u32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct nrd_Instance {
    _unused: [u8; 0],
}
pub const nrd_Result_SUCCESS: nrd_Result = 0;
pub const nrd_Result_FAILURE: nrd_Result = 1;
pub const nrd_Result_INVALID_ARGUMENT: nrd_Result = 2;
pub const nrd_Result_UNSUPPORTED: nrd_Result = 3;
pub const nrd_Result_NON_UNIQUE_IDENTIFIER: nrd_Result = 4;
pub const nrd_Result_MAX_NUM: nrd_Result = 5;
pub type nrd_Result = u32;
pub const nrd_ResourceType_IN_MV: nrd_ResourceType = 0;
pub const nrd_ResourceType_IN_NORMAL_ROUGHNESS: nrd_ResourceType = 1;
pub const nrd_ResourceType_IN_VIEWZ: nrd_ResourceType = 2;
pub const nrd_ResourceType_IN_DIFF_CONFIDENCE: nrd_ResourceType = 3;
pub const nrd_ResourceType_IN_SPEC_CONFIDENCE: nrd_ResourceType = 4;
pub const nrd_ResourceType_IN_DISOCCLUSION_THRESHOLD_MIX: nrd_ResourceType = 5;
pub const nrd_ResourceType_IN_BASECOLOR_METALNESS: nrd_ResourceType = 6;
pub const nrd_ResourceType_IN_DIFF_RADIANCE_HITDIST: nrd_ResourceType = 7;
pub const nrd_ResourceType_IN_SPEC_RADIANCE_HITDIST: nrd_ResourceType = 8;
pub const nrd_ResourceType_IN_DIFF_HITDIST: nrd_ResourceType = 9;
pub const nrd_ResourceType_IN_SPEC_HITDIST: nrd_ResourceType = 10;
pub const nrd_ResourceType_IN_DIFF_DIRECTION_HITDIST: nrd_ResourceType = 11;
pub const nrd_ResourceType_IN_DIFF_SH0: nrd_ResourceType = 12;
pub const nrd_ResourceType_IN_DIFF_SH1: nrd_ResourceType = 13;
pub const nrd_ResourceType_IN_SPEC_SH0: nrd_ResourceType = 14;
pub const nrd_ResourceType_IN_SPEC_SH1: nrd_ResourceType = 15;
pub const nrd_ResourceType_IN_PENUMBRA: nrd_ResourceType = 16;
pub const nrd_ResourceType_IN_TRANSLUCENCY: nrd_ResourceType = 17;
pub const nrd_ResourceType_IN_SIGNAL: nrd_ResourceType = 18;
pub const nrd_ResourceType_OUT_DIFF_RADIANCE_HITDIST: nrd_ResourceType = 19;
pub const nrd_ResourceType_OUT_SPEC_RADIANCE_HITDIST: nrd_ResourceType = 20;
pub const nrd_ResourceType_OUT_DIFF_SH0: nrd_ResourceType = 21;
pub const nrd_ResourceType_OUT_DIFF_SH1: nrd_ResourceType = 22;
pub const nrd_ResourceType_OUT_SPEC_SH0: nrd_ResourceType = 23;
pub const nrd_ResourceType_OUT_SPEC_SH1: nrd_ResourceType = 24;
pub const nrd_ResourceType_OUT_DIFF_HITDIST: nrd_ResourceType = 25;
pub const nrd_ResourceType_OUT_SPEC_HITDIST: nrd_ResourceType = 26;
pub const nrd_ResourceType_OUT_DIFF_DIRECTION_HITDIST: nrd_ResourceType = 27;
pub const nrd_ResourceType_OUT_SHADOW_TRANSLUCENCY: nrd_ResourceType = 28;
pub const nrd_ResourceType_OUT_SIGNAL: nrd_ResourceType = 29;
pub const nrd_ResourceType_OUT_VALIDATION: nrd_ResourceType = 30;
pub const nrd_ResourceType_TRANSIENT_POOL: nrd_ResourceType = 31;
pub const nrd_ResourceType_PERMANENT_POOL: nrd_ResourceType = 32;
pub const nrd_ResourceType_MAX_NUM: nrd_ResourceType = 33;
pub type nrd_ResourceType = u32;
pub const nrd_Denoiser_REBLUR_DIFFUSE: nrd_Denoiser = 0;
pub const nrd_Denoiser_REBLUR_DIFFUSE_OCCLUSION: nrd_Denoiser = 1;
pub const nrd_Denoiser_REBLUR_DIFFUSE_SH: nrd_Denoiser = 2;
pub const nrd_Denoiser_REBLUR_SPECULAR: nrd_Denoiser = 3;
pub const nrd_Denoiser_REBLUR_SPECULAR_OCCLUSION: nrd_Denoiser = 4;
pub const nrd_Denoiser_REBLUR_SPECULAR_SH: nrd_Denoiser = 5;
pub const nrd_Denoiser_REBLUR_DIFFUSE_SPECULAR: nrd_Denoiser = 6;
pub const nrd_Denoiser_REBLUR_DIFFUSE_SPECULAR_OCCLUSION: nrd_Denoiser = 7;
pub const nrd_Denoiser_REBLUR_DIFFUSE_SPECULAR_SH: nrd_Denoiser = 8;
pub const nrd_Denoiser_REBLUR_DIFFUSE_DIRECTIONAL_OCCLUSION: nrd_Denoiser = 9;
pub const nrd_Denoiser_RELAX_DIFFUSE: nrd_Denoiser = 10;
pub const nrd_Denoiser_RELAX_DIFFUSE_SH: nrd_Denoiser = 11;
pub const nrd_Denoiser_RELAX_SPECULAR: nrd_Denoiser = 12;
pub const nrd_Denoiser_RELAX_SPECULAR_SH: nrd_Denoiser = 13;
pub const nrd_Denoiser_RELAX_DIFFUSE_SPECULAR: nrd_Denoiser = 14;
pub const nrd_Denoiser_RELAX_DIFFUSE_SPECULAR_SH: nrd_Denoiser = 15;
pub const nrd_Denoiser_SIGMA_SHADOW: nrd_Denoiser = 16;
pub const nrd_Denoiser_SIGMA_SHADOW_TRANSLUCENCY: nrd_Denoiser = 17;
pub const nrd_Denoiser_REFERENCE: nrd_Denoiser = 18;
pub const nrd_Denoiser_MAX_NUM: nrd_Denoiser = 19;
pub type nrd_Denoiser = u32;
pub const nrd_Format_R8_UNORM: nrd_Format = 0;
pub const nrd_Format_R8_SNORM: nrd_Format = 1;
pub const nrd_Format_R8_UINT: nrd_Format = 2;
pub const nrd_Format_R8_SINT: nrd_Format = 3;
pub const nrd_Format_RG8_UNORM: nrd_Format = 4;
pub const nrd_Format_RG8_SNORM: nrd_Format = 5;
pub const nrd_Format_RG8_UINT: nrd_Format = 6;
pub const nrd_Format_RG8_SINT: nrd_Format = 7;
pub const nrd_Format_RGBA8_UNORM: nrd_Format = 8;
pub const nrd_Format_RGBA8_SNORM: nrd_Format = 9;
pub const nrd_Format_RGBA8_UINT: nrd_Format = 10;
pub const nrd_Format_RGBA8_SINT: nrd_Format = 11;
pub const nrd_Format_RGBA8_SRGB: nrd_Format = 12;
pub const nrd_Format_R16_UNORM: nrd_Format = 13;
pub const nrd_Format_R16_SNORM: nrd_Format = 14;
pub const nrd_Format_R16_UINT: nrd_Format = 15;
pub const nrd_Format_R16_SINT: nrd_Format = 16;
pub const nrd_Format_R16_SFLOAT: nrd_Format = 17;
pub const nrd_Format_RG16_UNORM: nrd_Format = 18;
pub const nrd_Format_RG16_SNORM: nrd_Format = 19;
pub const nrd_Format_RG16_UINT: nrd_Format = 20;
pub const nrd_Format_RG16_SINT: nrd_Format = 21;
pub const nrd_Format_RG16_SFLOAT: nrd_Format = 22;
pub const nrd_Format_RGBA16_UNORM: nrd_Format = 23;
pub const nrd_Format_RGBA16_SNORM: nrd_Format = 24;
pub const nrd_Format_RGBA16_UINT: nrd_Format = 25;
pub const nrd_Format_RGBA16_SINT: nrd_Format = 26;
pub const nrd_Format_RGBA16_SFLOAT: nrd_Format = 27;
pub const nrd_Format_R32_UINT: nrd_Format = 28;
pub const nrd_Format_R32_SINT: nrd_Format = 29;
pub const nrd_Format_R32_SFLOAT: nrd_Format = 30;
pub const nrd_Format_RG32_UINT: nrd_Format = 31;
pub const nrd_Format_RG32_SINT: nrd_Format = 32;
pub const nrd_Format_RG32_SFLOAT: nrd_Format = 33;
pub const nrd_Format_RGB32_UINT: nrd_Format = 34;
pub const nrd_Format_RGB32_SINT: nrd_Format = 35;
pub const nrd_Format_RGB32_SFLOAT: nrd_Format = 36;
pub const nrd_Format_RGBA32_UINT: nrd_Format = 37;
pub const nrd_Format_RGBA32_SINT: nrd_Format = 38;
pub const nrd_Format_RGBA32_SFLOAT: nrd_Format = 39;
pub const nrd_Format_R10_G10_B10_A2_UNORM: nrd_Format = 40;
pub const nrd_Format_R10_G10_B10_A2_UINT: nrd_Format = 41;
pub const nrd_Format_R11_G11_B10_UFLOAT: nrd_Format = 42;
pub const nrd_Format_R9_G9_B9_E5_UFLOAT: nrd_Format = 43;
pub const nrd_Format_MAX_NUM: nrd_Format = 44;
pub type nrd_Format = u32;
pub const nrd_DescriptorType_TEXTURE: nrd_DescriptorType = 0;
pub const nrd_DescriptorType_STORAGE_TEXTURE: nrd_DescriptorType = 1;
pub const nrd_DescriptorType_MAX_NUM: nrd_DescriptorType = 2;
pub type nrd_DescriptorType = u32;
pub const nrd_Sampler_NEAREST_CLAMP: nrd_Sampler = 0;
pub const nrd_Sampler_LINEAR_CLAMP: nrd_Sampler = 1;
pub const nrd_Sampler_MAX_NUM: nrd_Sampler = 2;
pub type nrd_Sampler = u32;
pub const nrd_NormalEncoding_RGBA8_UNORM: nrd_NormalEncoding = 0;
pub const nrd_NormalEncoding_RGBA8_SNORM: nrd_NormalEncoding = 1;
pub const nrd_NormalEncoding_R10_G10_B10_A2_UNORM: nrd_NormalEncoding = 2;
pub const nrd_NormalEncoding_RGBA16_UNORM: nrd_NormalEncoding = 3;
pub const nrd_NormalEncoding_RGBA16_SNORM: nrd_NormalEncoding = 4;
pub const nrd_NormalEncoding_MAX_NUM: nrd_NormalEncoding = 5;
pub type nrd_NormalEncoding = u8;
pub const nrd_RoughnessEncoding_SQ_LINEAR: nrd_RoughnessEncoding = 0;
pub const nrd_RoughnessEncoding_LINEAR: nrd_RoughnessEncoding = 1;
pub const nrd_RoughnessEncoding_SQRT_LINEAR: nrd_RoughnessEncoding = 2;
pub const nrd_RoughnessEncoding_MAX_NUM: nrd_RoughnessEncoding = 3;
pub type nrd_RoughnessEncoding = u8;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct nrd_AllocationCallbacks {
    pub Allocate: ::std::option::Option<
        unsafe extern "C" fn(
            userArg: *mut ::std::os::raw::c_void,
            size: usize,
            alignment: usize,
        ) -> *mut ::std::os::raw::c_void,
    >,
    pub Reallocate: ::std::option::Option<
        unsafe extern "C" fn(
            userArg: *mut ::std::os::raw::c_void,
            memory: *mut ::std::os::raw::c_void,
            size: usize,
            alignment: usize,
        ) -> *mut ::std::os::raw::c_void,
    >,
    pub Free: ::std::option::Option<
        unsafe extern "C" fn(
            userArg: *mut ::std::os::raw::c_void,
            memory: *mut ::std::os::raw::c_void,
        ),
    >,
    pub userArg: *mut ::std::os::raw::c_void,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of nrd_AllocationCallbacks"][::std::mem::size_of::<nrd_AllocationCallbacks>() - 32usize];
    ["Alignment of nrd_AllocationCallbacks"]
        [::std::mem::align_of::<nrd_AllocationCallbacks>() - 8usize];
    ["Offset of field: nrd_AllocationCallbacks::Allocate"]
        [::std::mem::offset_of!(nrd_AllocationCallbacks, Allocate) - 0usize];
    ["Offset of field: nrd_AllocationCallbacks::Reallocate"]
        [::std::mem::offset_of!(nrd_AllocationCallbacks, Reallocate) - 8usize];
    ["Offset of field: nrd_AllocationCallbacks::Free"]
        [::std::mem::offset_of!(nrd_AllocationCallbacks, Free) - 16usize];
    ["Offset of field: nrd_AllocationCallbacks::userArg"]
        [::std::mem::offset_of!(nrd_AllocationCallbacks, userArg) - 24usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct nrd_SPIRVBindingOffsets {
    pub samplerOffset: u32,
    pub textureOffset: u32,
    pub constantBufferOffset: u32,
    pub storageTextureAndBufferOffset: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of nrd_SPIRVBindingOffsets"][::std::mem::size_of::<nrd_SPIRVBindingOffsets>() - 16usize];
    ["Alignment of nrd_SPIRVBindingOffsets"]
        [::std::mem::align_of::<nrd_SPIRVBindingOffsets>() - 4usize];
    ["Offset of field: nrd_SPIRVBindingOffsets::samplerOffset"]
        [::std::mem::offset_of!(nrd_SPIRVBindingOffsets, samplerOffset) - 0usize];
    ["Offset of field: nrd_SPIRVBindingOffsets::textureOffset"]
        [::std::mem::offset_of!(nrd_SPIRVBindingOffsets, textureOffset) - 4usize];
    ["Offset of field: nrd_SPIRVBindingOffsets::constantBufferOffset"]
        [::std::mem::offset_of!(nrd_SPIRVBindingOffsets, constantBufferOffset) - 8usize];
    ["Offset of field: nrd_SPIRVBindingOffsets::storageTextureAndBufferOffset"]
        [::std::mem::offset_of!(nrd_SPIRVBindingOffsets, storageTextureAndBufferOffset) - 12usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct nrd_LibraryDesc {
    pub spirvBindingOffsets: nrd_SPIRVBindingOffsets,
    pub supportedDenoisers: *const nrd_Denoiser,
    pub supportedDenoisersNum: u32,
    pub versionMajor: u8,
    pub versionMinor: u8,
    pub versionBuild: u8,
    pub normalEncoding: nrd_NormalEncoding,
    pub roughnessEncoding: nrd_RoughnessEncoding,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of nrd_LibraryDesc"][::std::mem::size_of::<nrd_LibraryDesc>() - 40usize];
    ["Alignment of nrd_LibraryDesc"][::std::mem::align_of::<nrd_LibraryDesc>() - 8usize];
    ["Offset of field: nrd_LibraryDesc::spirvBindingOffsets"]
        [::std::mem::offset_of!(nrd_LibraryDesc, spirvBindingOffsets) - 0usize];
    ["Offset of field: nrd_LibraryDesc::supportedDenoisers"]
        [::std::mem::offset_of!(nrd_LibraryDesc, supportedDenoisers) - 16usize];
    ["Offset of field: nrd_LibraryDesc::supportedDenoisersNum"]
        [::std::mem::offset_of!(nrd_LibraryDesc, supportedDenoisersNum) - 24usize];
    ["Offset of field: nrd_LibraryDesc::versionMajor"]
        [::std::mem::offset_of!(nrd_LibraryDesc, versionMajor) - 28usize];
    ["Offset of field: nrd_LibraryDesc::versionMinor"]
        [::std::mem::offset_of!(nrd_LibraryDesc, versionMinor) - 29usize];
    ["Offset of field: nrd_LibraryDesc::versionBuild"]
        [::std::mem::offset_of!(nrd_LibraryDesc, versionBuild) - 30usize];
    ["Offset of field: nrd_LibraryDesc::normalEncoding"]
        [::std::mem::offset_of!(nrd_LibraryDesc, normalEncoding) - 31usize];
    ["Offset of field: nrd_LibraryDesc::roughnessEncoding"]
        [::std::mem::offset_of!(nrd_LibraryDesc, roughnessEncoding) - 32usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct nrd_DenoiserDesc {
    pub identifier: nrd_Identifier,
    pub denoiser: nrd_Denoiser,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of nrd_DenoiserDesc"][::std::mem::size_of::<nrd_DenoiserDesc>() - 8usize];
    ["Alignment of nrd_DenoiserDesc"][::std::mem::align_of::<nrd_DenoiserDesc>() - 4usize];
    ["Offset of field: nrd_DenoiserDesc::identifier"]
        [::std::mem::offset_of!(nrd_DenoiserDesc, identifier) - 0usize];
    ["Offset of field: nrd_DenoiserDesc::denoiser"]
        [::std::mem::offset_of!(nrd_DenoiserDesc, denoiser) - 4usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct nrd_InstanceCreationDesc {
    pub allocationCallbacks: nrd_AllocationCallbacks,
    pub denoisers: *const nrd_DenoiserDesc,
    pub denoisersNum: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of nrd_InstanceCreationDesc"]
        [::std::mem::size_of::<nrd_InstanceCreationDesc>() - 48usize];
    ["Alignment of nrd_InstanceCreationDesc"]
        [::std::mem::align_of::<nrd_InstanceCreationDesc>() - 8usize];
    ["Offset of field: nrd_InstanceCreationDesc::allocationCallbacks"]
        [::std::mem::offset_of!(nrd_InstanceCreationDesc, allocationCallbacks) - 0usize];
    ["Offset of field: nrd_InstanceCreationDesc::denoisers"]
        [::std::mem::offset_of!(nrd_InstanceCreationDesc, denoisers) - 32usize];
    ["Offset of field: nrd_InstanceCreationDesc::denoisersNum"]
        [::std::mem::offset_of!(nrd_InstanceCreationDesc, denoisersNum) - 40usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct nrd_TextureDesc {
    pub format: nrd_Format,
    pub downsampleFactor: u16,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of nrd_TextureDesc"][::std::mem::size_of::<nrd_TextureDesc>() - 8usize];
    ["Alignment of nrd_TextureDesc"][::std::mem::align_of::<nrd_TextureDesc>() - 4usize];
    ["Offset of field: nrd_TextureDesc::format"]
        [::std::mem::offset_of!(nrd_TextureDesc, format) - 0usize];
    ["Offset of field: nrd_TextureDesc::downsampleFactor"]
        [::std::mem::offset_of!(nrd_TextureDesc, downsampleFactor) - 4usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct nrd_ResourceDesc {
    pub descriptorType: nrd_DescriptorType,
    pub type_: nrd_ResourceType,
    pub indexInPool: u16,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of nrd_ResourceDesc"][::std::mem::size_of::<nrd_ResourceDesc>() - 12usize];
    ["Alignment of nrd_ResourceDesc"][::std::mem::align_of::<nrd_ResourceDesc>() - 4usize];
    ["Offset of field: nrd_ResourceDesc::descriptorType"]
        [::std::mem::offset_of!(nrd_ResourceDesc, descriptorType) - 0usize];
    ["Offset of field: nrd_ResourceDesc::type_"]
        [::std::mem::offset_of!(nrd_ResourceDesc, type_) - 4usize];
    ["Offset of field: nrd_ResourceDesc::indexInPool"]
        [::std::mem::offset_of!(nrd_ResourceDesc, indexInPool) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct nrd_ResourceRangeDesc {
    pub descriptorType: nrd_DescriptorType,
    pub descriptorsNum: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of nrd_ResourceRangeDesc"][::std::mem::size_of::<nrd_ResourceRangeDesc>() - 8usize];
    ["Alignment of nrd_ResourceRangeDesc"]
        [::std::mem::align_of::<nrd_ResourceRangeDesc>() - 4usize];
    ["Offset of field: nrd_ResourceRangeDesc::descriptorType"]
        [::std::mem::offset_of!(nrd_ResourceRangeDesc, descriptorType) - 0usize];
    ["Offset of field: nrd_ResourceRangeDesc::descriptorsNum"]
        [::std::mem::offset_of!(nrd_ResourceRangeDesc, descriptorsNum) - 4usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct nrd_ComputeShaderDesc {
    pub bytecode: *const ::std::os::raw::c_void,
    pub size: u64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of nrd_ComputeShaderDesc"][::std::mem::size_of::<nrd_ComputeShaderDesc>() - 16usize];
    ["Alignment of nrd_ComputeShaderDesc"]
        [::std::mem::align_of::<nrd_ComputeShaderDesc>() - 8usize];
    ["Offset of field: nrd_ComputeShaderDesc::bytecode"]
        [::std::mem::offset_of!(nrd_ComputeShaderDesc, bytecode) - 0usize];
    ["Offset of field: nrd_ComputeShaderDesc::size"]
        [::std::mem::offset_of!(nrd_ComputeShaderDesc, size) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct nrd_PipelineDesc {
    pub computeShaderDXBC: nrd_ComputeShaderDesc,
    pub computeShaderDXIL: nrd_ComputeShaderDesc,
    pub computeShaderSPIRV: nrd_ComputeShaderDesc,
    pub shaderFileName: *const ::std::os::raw::c_char,
    pub shaderEntryPointName: *const ::std::os::raw::c_char,
    pub resourceRanges: *const nrd_ResourceRangeDesc,
    pub resourceRangesNum: u32,
    pub hasConstantData: bool,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of nrd_PipelineDesc"][::std::mem::size_of::<nrd_PipelineDesc>() - 80usize];
    ["Alignment of nrd_PipelineDesc"][::std::mem::align_of::<nrd_PipelineDesc>() - 8usize];
    ["Offset of field: nrd_PipelineDesc::computeShaderDXBC"]
        [::std::mem::offset_of!(nrd_PipelineDesc, computeShaderDXBC) - 0usize];
    ["Offset of field: nrd_PipelineDesc::computeShaderDXIL"]
        [::std::mem::offset_of!(nrd_PipelineDesc, computeShaderDXIL) - 16usize];
    ["Offset of field: nrd_PipelineDesc::computeShaderSPIRV"]
        [::std::mem::offset_of!(nrd_PipelineDesc, computeShaderSPIRV) - 32usize];
    ["Offset of field: nrd_PipelineDesc::shaderFileName"]
        [::std::mem::offset_of!(nrd_PipelineDesc, shaderFileName) - 48usize];
    ["Offset of field: nrd_PipelineDesc::shaderEntryPointName"]
        [::std::mem::offset_of!(nrd_PipelineDesc, shaderEntryPointName) - 56usize];
    ["Offset of field: nrd_PipelineDesc::resourceRanges"]
        [::std::mem::offset_of!(nrd_PipelineDesc, resourceRanges) - 64usize];
    ["Offset of field: nrd_PipelineDesc::resourceRangesNum"]
        [::std::mem::offset_of!(nrd_PipelineDesc, resourceRangesNum) - 72usize];
    ["Offset of field: nrd_PipelineDesc::hasConstantData"]
        [::std::mem::offset_of!(nrd_PipelineDesc, hasConstantData) - 76usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct nrd_DescriptorPoolDesc {
    pub totalConstantBuffersNum: u32,
    pub totalSamplersNum: u32,
    pub totalTexturesNum: u32,
    pub totalStorageTexturesNum: u32,
    pub perSetTexturesMaxNum: u32,
    pub perSetStorageTexturesMaxNum: u32,
    pub setsMaxNum: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of nrd_DescriptorPoolDesc"][::std::mem::size_of::<nrd_DescriptorPoolDesc>() - 28usize];
    ["Alignment of nrd_DescriptorPoolDesc"]
        [::std::mem::align_of::<nrd_DescriptorPoolDesc>() - 4usize];
    ["Offset of field: nrd_DescriptorPoolDesc::totalConstantBuffersNum"]
        [::std::mem::offset_of!(nrd_DescriptorPoolDesc, totalConstantBuffersNum) - 0usize];
    ["Offset of field: nrd_DescriptorPoolDesc::totalSamplersNum"]
        [::std::mem::offset_of!(nrd_DescriptorPoolDesc, totalSamplersNum) - 4usize];
    ["Offset of field: nrd_DescriptorPoolDesc::totalTexturesNum"]
        [::std::mem::offset_of!(nrd_DescriptorPoolDesc, totalTexturesNum) - 8usize];
    ["Offset of field: nrd_DescriptorPoolDesc::totalStorageTexturesNum"]
        [::std::mem::offset_of!(nrd_DescriptorPoolDesc, totalStorageTexturesNum) - 12usize];
    ["Offset of field: nrd_DescriptorPoolDesc::perSetTexturesMaxNum"]
        [::std::mem::offset_of!(nrd_DescriptorPoolDesc, perSetTexturesMaxNum) - 16usize];
    ["Offset of field: nrd_DescriptorPoolDesc::perSetStorageTexturesMaxNum"]
        [::std::mem::offset_of!(nrd_DescriptorPoolDesc, perSetStorageTexturesMaxNum) - 20usize];
    ["Offset of field: nrd_DescriptorPoolDesc::setsMaxNum"]
        [::std::mem::offset_of!(nrd_DescriptorPoolDesc, setsMaxNum) - 24usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct nrd_InstanceDesc {
    pub constantBufferMaxDataSize: u32,
    pub constantBufferRegisterIndex: u32,
    pub constantBufferAndResourcesSpaceIndex: u32,
    pub samplers: *const nrd_Sampler,
    pub samplersNum: u32,
    pub samplersSpaceIndex: u32,
    pub samplersBaseRegisterIndex: u32,
    pub samplersInSeparateSet: bool,
    pub pipelines: *const nrd_PipelineDesc,
    pub pipelinesNum: u32,
    pub resourcesBaseRegisterIndex: u32,
    pub permanentPool: *const nrd_TextureDesc,
    pub permanentPoolSize: u32,
    pub transientPool: *const nrd_TextureDesc,
    pub transientPoolSize: u32,
    pub descriptorPoolDesc: nrd_DescriptorPoolDesc,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of nrd_InstanceDesc"][::std::mem::size_of::<nrd_InstanceDesc>() - 112usize];
    ["Alignment of nrd_InstanceDesc"][::std::mem::align_of::<nrd_InstanceDesc>() - 8usize];
    ["Offset of field: nrd_InstanceDesc::constantBufferMaxDataSize"]
        [::std::mem::offset_of!(nrd_InstanceDesc, constantBufferMaxDataSize) - 0usize];
    ["Offset of field: nrd_InstanceDesc::constantBufferRegisterIndex"]
        [::std::mem::offset_of!(nrd_InstanceDesc, constantBufferRegisterIndex) - 4usize];
    ["Offset of field: nrd_InstanceDesc::constantBufferAndResourcesSpaceIndex"]
        [::std::mem::offset_of!(nrd_InstanceDesc, constantBufferAndResourcesSpaceIndex) - 8usize];
    ["Offset of field: nrd_InstanceDesc::samplers"]
        [::std::mem::offset_of!(nrd_InstanceDesc, samplers) - 16usize];
    ["Offset of field: nrd_InstanceDesc::samplersNum"]
        [::std::mem::offset_of!(nrd_InstanceDesc, samplersNum) - 24usize];
    ["Offset of field: nrd_InstanceDesc::samplersSpaceIndex"]
        [::std::mem::offset_of!(nrd_InstanceDesc, samplersSpaceIndex) - 28usize];
    ["Offset of field: nrd_InstanceDesc::samplersBaseRegisterIndex"]
        [::std::mem::offset_of!(nrd_InstanceDesc, samplersBaseRegisterIndex) - 32usize];
    ["Offset of field: nrd_InstanceDesc::samplersInSeparateSet"]
        [::std::mem::offset_of!(nrd_InstanceDesc, samplersInSeparateSet) - 36usize];
    ["Offset of field: nrd_InstanceDesc::pipelines"]
        [::std::mem::offset_of!(nrd_InstanceDesc, pipelines) - 40usize];
    ["Offset of field: nrd_InstanceDesc::pipelinesNum"]
        [::std::mem::offset_of!(nrd_InstanceDesc, pipelinesNum) - 48usize];
    ["Offset of field: nrd_InstanceDesc::resourcesBaseRegisterIndex"]
        [::std::mem::offset_of!(nrd_InstanceDesc, resourcesBaseRegisterIndex) - 52usize];
    ["Offset of field: nrd_InstanceDesc::permanentPool"]
        [::std::mem::offset_of!(nrd_InstanceDesc, permanentPool) - 56usize];
    ["Offset of field: nrd_InstanceDesc::permanentPoolSize"]
        [::std::mem::offset_of!(nrd_InstanceDesc, permanentPoolSize) - 64usize];
    ["Offset of field: nrd_InstanceDesc::transientPool"]
        [::std::mem::offset_of!(nrd_InstanceDesc, transientPool) - 72usize];
    ["Offset of field: nrd_InstanceDesc::transientPoolSize"]
        [::std::mem::offset_of!(nrd_InstanceDesc, transientPoolSize) - 80usize];
    ["Offset of field: nrd_InstanceDesc::descriptorPoolDesc"]
        [::std::mem::offset_of!(nrd_InstanceDesc, descriptorPoolDesc) - 84usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct nrd_DispatchDesc {
    pub name: *const ::std::os::raw::c_char,
    pub identifier: nrd_Identifier,
    pub resources: *const nrd_ResourceDesc,
    pub resourcesNum: u32,
    pub constantBufferData: *const u8,
    pub constantBufferDataSize: u32,
    pub constantBufferDataMatchesPreviousDispatch: bool,
    pub pipelineIndex: u16,
    pub gridWidth: u16,
    pub gridHeight: u16,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of nrd_DispatchDesc"][::std::mem::size_of::<nrd_DispatchDesc>() - 56usize];
    ["Alignment of nrd_DispatchDesc"][::std::mem::align_of::<nrd_DispatchDesc>() - 8usize];
    ["Offset of field: nrd_DispatchDesc::name"]
        [::std::mem::offset_of!(nrd_DispatchDesc, name) - 0usize];
    ["Offset of field: nrd_DispatchDesc::identifier"]
        [::std::mem::offset_of!(nrd_DispatchDesc, identifier) - 8usize];
    ["Offset of field: nrd_DispatchDesc::resources"]
        [::std::mem::offset_of!(nrd_DispatchDesc, resources) - 16usize];
    ["Offset of field: nrd_DispatchDesc::resourcesNum"]
        [::std::mem::offset_of!(nrd_DispatchDesc, resourcesNum) - 24usize];
    ["Offset of field: nrd_DispatchDesc::constantBufferData"]
        [::std::mem::offset_of!(nrd_DispatchDesc, constantBufferData) - 32usize];
    ["Offset of field: nrd_DispatchDesc::constantBufferDataSize"]
        [::std::mem::offset_of!(nrd_DispatchDesc, constantBufferDataSize) - 40usize];
    ["Offset of field: nrd_DispatchDesc::constantBufferDataMatchesPreviousDispatch"][::std::mem::offset_of!(
        nrd_DispatchDesc,
        constantBufferDataMatchesPreviousDispatch
    ) - 44usize];
    ["Offset of field: nrd_DispatchDesc::pipelineIndex"]
        [::std::mem::offset_of!(nrd_DispatchDesc, pipelineIndex) - 46usize];
    ["Offset of field: nrd_DispatchDesc::gridWidth"]
        [::std::mem::offset_of!(nrd_DispatchDesc, gridWidth) - 48usize];
    ["Offset of field: nrd_DispatchDesc::gridHeight"]
        [::std::mem::offset_of!(nrd_DispatchDesc, gridHeight) - 50usize];
};
pub const nrd_CheckerboardMode_OFF: nrd_CheckerboardMode = 0;
pub const nrd_CheckerboardMode_BLACK: nrd_CheckerboardMode = 1;
pub const nrd_CheckerboardMode_WHITE: nrd_CheckerboardMode = 2;
pub const nrd_CheckerboardMode_MAX_NUM: nrd_CheckerboardMode = 3;
pub type nrd_CheckerboardMode = u8;
pub const nrd_AccumulationMode_CONTINUE: nrd_AccumulationMode = 0;
pub const nrd_AccumulationMode_RESTART: nrd_AccumulationMode = 1;
pub const nrd_AccumulationMode_CLEAR_AND_RESTART: nrd_AccumulationMode = 2;
pub const nrd_AccumulationMode_MAX_NUM: nrd_AccumulationMode = 3;
pub type nrd_AccumulationMode = u8;
pub const nrd_HitDistanceReconstructionMode_OFF: nrd_HitDistanceReconstructionMode = 0;
pub const nrd_HitDistanceReconstructionMode_AREA_3X3: nrd_HitDistanceReconstructionMode = 1;
pub const nrd_HitDistanceReconstructionMode_AREA_5X5: nrd_HitDistanceReconstructionMode = 2;
pub const nrd_HitDistanceReconstructionMode_MAX_NUM: nrd_HitDistanceReconstructionMode = 3;
pub type nrd_HitDistanceReconstructionMode = u8;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct nrd_CommonSettings {
    pub viewToClipMatrix: [f32; 16usize],
    pub viewToClipMatrixPrev: [f32; 16usize],
    pub worldToViewMatrix: [f32; 16usize],
    pub worldToViewMatrixPrev: [f32; 16usize],
    pub worldPrevToWorldMatrix: [f32; 16usize],
    pub motionVectorScale: [f32; 3usize],
    pub cameraJitter: [f32; 2usize],
    pub cameraJitterPrev: [f32; 2usize],
    pub resourceSize: [u16; 2usize],
    pub resourceSizePrev: [u16; 2usize],
    pub rectSize: [u16; 2usize],
    pub rectSizePrev: [u16; 2usize],
    pub viewZScale: f32,
    pub timeDeltaBetweenFrames: f32,
    pub denoisingRange: f32,
    pub disocclusionThreshold: f32,
    pub disocclusionThresholdAlternate: f32,
    pub cameraAttachedReflectionMaterialID: f32,
    pub strandMaterialID: f32,
    pub strandThickness: f32,
    pub splitScreen: f32,
    pub printfAt: [u16; 2usize],
    pub debug: f32,
    pub rectOrigin: [u32; 2usize],
    pub frameIndex: u32,
    pub accumulationMode: nrd_AccumulationMode,
    pub isMotionVectorInWorldSpace: bool,
    pub isHistoryConfidenceAvailable: bool,
    pub isDisocclusionThresholdMixAvailable: bool,
    pub isBaseColorMetalnessAvailable: bool,
    pub enableValidation: bool,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of nrd_CommonSettings"][::std::mem::size_of::<nrd_CommonSettings>() - 428usize];
    ["Alignment of nrd_CommonSettings"][::std::mem::align_of::<nrd_CommonSettings>() - 4usize];
    ["Offset of field: nrd_CommonSettings::viewToClipMatrix"]
        [::std::mem::offset_of!(nrd_CommonSettings, viewToClipMatrix) - 0usize];
    ["Offset of field: nrd_CommonSettings::viewToClipMatrixPrev"]
        [::std::mem::offset_of!(nrd_CommonSettings, viewToClipMatrixPrev) - 64usize];
    ["Offset of field: nrd_CommonSettings::worldToViewMatrix"]
        [::std::mem::offset_of!(nrd_CommonSettings, worldToViewMatrix) - 128usize];
    ["Offset of field: nrd_CommonSettings::worldToViewMatrixPrev"]
        [::std::mem::offset_of!(nrd_CommonSettings, worldToViewMatrixPrev) - 192usize];
    ["Offset of field: nrd_CommonSettings::worldPrevToWorldMatrix"]
        [::std::mem::offset_of!(nrd_CommonSettings, worldPrevToWorldMatrix) - 256usize];
    ["Offset of field: nrd_CommonSettings::motionVectorScale"]
        [::std::mem::offset_of!(nrd_CommonSettings, motionVectorScale) - 320usize];
    ["Offset of field: nrd_CommonSettings::cameraJitter"]
        [::std::mem::offset_of!(nrd_CommonSettings, cameraJitter) - 332usize];
    ["Offset of field: nrd_CommonSettings::cameraJitterPrev"]
        [::std::mem::offset_of!(nrd_CommonSettings, cameraJitterPrev) - 340usize];
    ["Offset of field: nrd_CommonSettings::resourceSize"]
        [::std::mem::offset_of!(nrd_CommonSettings, resourceSize) - 348usize];
    ["Offset of field: nrd_CommonSettings::resourceSizePrev"]
        [::std::mem::offset_of!(nrd_CommonSettings, resourceSizePrev) - 352usize];
    ["Offset of field: nrd_CommonSettings::rectSize"]
        [::std::mem::offset_of!(nrd_CommonSettings, rectSize) - 356usize];
    ["Offset of field: nrd_CommonSettings::rectSizePrev"]
        [::std::mem::offset_of!(nrd_CommonSettings, rectSizePrev) - 360usize];
    ["Offset of field: nrd_CommonSettings::viewZScale"]
        [::std::mem::offset_of!(nrd_CommonSettings, viewZScale) - 364usize];
    ["Offset of field: nrd_CommonSettings::timeDeltaBetweenFrames"]
        [::std::mem::offset_of!(nrd_CommonSettings, timeDeltaBetweenFrames) - 368usize];
    ["Offset of field: nrd_CommonSettings::denoisingRange"]
        [::std::mem::offset_of!(nrd_CommonSettings, denoisingRange) - 372usize];
    ["Offset of field: nrd_CommonSettings::disocclusionThreshold"]
        [::std::mem::offset_of!(nrd_CommonSettings, disocclusionThreshold) - 376usize];
    ["Offset of field: nrd_CommonSettings::disocclusionThresholdAlternate"]
        [::std::mem::offset_of!(nrd_CommonSettings, disocclusionThresholdAlternate) - 380usize];
    ["Offset of field: nrd_CommonSettings::cameraAttachedReflectionMaterialID"]
        [::std::mem::offset_of!(nrd_CommonSettings, cameraAttachedReflectionMaterialID) - 384usize];
    ["Offset of field: nrd_CommonSettings::strandMaterialID"]
        [::std::mem::offset_of!(nrd_CommonSettings, strandMaterialID) - 388usize];
    ["Offset of field: nrd_CommonSettings::strandThickness"]
        [::std::mem::offset_of!(nrd_CommonSettings, strandThickness) - 392usize];
    ["Offset of field: nrd_CommonSettings::splitScreen"]
        [::std::mem::offset_of!(nrd_CommonSettings, splitScreen) - 396usize];
    ["Offset of field: nrd_CommonSettings::printfAt"]
        [::std::mem::offset_of!(nrd_CommonSettings, printfAt) - 400usize];
    ["Offset of field: nrd_CommonSettings::debug"]
        [::std::mem::offset_of!(nrd_CommonSettings, debug) - 404usize];
    ["Offset of field: nrd_CommonSettings::rectOrigin"]
        [::std::mem::offset_of!(nrd_CommonSettings, rectOrigin) - 408usize];
    ["Offset of field: nrd_CommonSettings::frameIndex"]
        [::std::mem::offset_of!(nrd_CommonSettings, frameIndex) - 416usize];
    ["Offset of field: nrd_CommonSettings::accumulationMode"]
        [::std::mem::offset_of!(nrd_CommonSettings, accumulationMode) - 420usize];
    ["Offset of field: nrd_CommonSettings::isMotionVectorInWorldSpace"]
        [::std::mem::offset_of!(nrd_CommonSettings, isMotionVectorInWorldSpace) - 421usize];
    ["Offset of field: nrd_CommonSettings::isHistoryConfidenceAvailable"]
        [::std::mem::offset_of!(nrd_CommonSettings, isHistoryConfidenceAvailable) - 422usize];
    ["Offset of field: nrd_CommonSettings::isDisocclusionThresholdMixAvailable"][::std::mem::offset_of!(
        nrd_CommonSettings,
        isDisocclusionThresholdMixAvailable
    ) - 423usize];
    ["Offset of field: nrd_CommonSettings::isBaseColorMetalnessAvailable"]
        [::std::mem::offset_of!(nrd_CommonSettings, isBaseColorMetalnessAvailable) - 424usize];
    ["Offset of field: nrd_CommonSettings::enableValidation"]
        [::std::mem::offset_of!(nrd_CommonSettings, enableValidation) - 425usize];
};
pub const nrd_REBLUR_MAX_HISTORY_FRAME_NUM: u32 = 63;
pub const nrd_REBLUR_DEFAULT_ACCUMULATION_TIME: f32 = 0.5;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct nrd_HitDistanceParameters {
    pub A: f32,
    pub B: f32,
    pub C: f32,
    pub D: f32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of nrd_HitDistanceParameters"]
        [::std::mem::size_of::<nrd_HitDistanceParameters>() - 16usize];
    ["Alignment of nrd_HitDistanceParameters"]
        [::std::mem::align_of::<nrd_HitDistanceParameters>() - 4usize];
    ["Offset of field: nrd_HitDistanceParameters::A"]
        [::std::mem::offset_of!(nrd_HitDistanceParameters, A) - 0usize];
    ["Offset of field: nrd_HitDistanceParameters::B"]
        [::std::mem::offset_of!(nrd_HitDistanceParameters, B) - 4usize];
    ["Offset of field: nrd_HitDistanceParameters::C"]
        [::std::mem::offset_of!(nrd_HitDistanceParameters, C) - 8usize];
    ["Offset of field: nrd_HitDistanceParameters::D"]
        [::std::mem::offset_of!(nrd_HitDistanceParameters, D) - 12usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct nrd_ReblurAntilagSettings {
    pub luminanceSigmaScale: f32,
    pub luminanceSensitivity: f32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of nrd_ReblurAntilagSettings"]
        [::std::mem::size_of::<nrd_ReblurAntilagSettings>() - 8usize];
    ["Alignment of nrd_ReblurAntilagSettings"]
        [::std::mem::align_of::<nrd_ReblurAntilagSettings>() - 4usize];
    ["Offset of field: nrd_ReblurAntilagSettings::luminanceSigmaScale"]
        [::std::mem::offset_of!(nrd_ReblurAntilagSettings, luminanceSigmaScale) - 0usize];
    ["Offset of field: nrd_ReblurAntilagSettings::luminanceSensitivity"]
        [::std::mem::offset_of!(nrd_ReblurAntilagSettings, luminanceSensitivity) - 4usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct nrd_ReblurSettings {
    pub hitDistanceParameters: nrd_HitDistanceParameters,
    pub antilagSettings: nrd_ReblurAntilagSettings,
    pub maxAccumulatedFrameNum: u32,
    pub maxFastAccumulatedFrameNum: u32,
    pub maxStabilizedFrameNum: u32,
    pub historyFixFrameNum: u32,
    pub historyFixBasePixelStride: u32,
    pub diffusePrepassBlurRadius: f32,
    pub specularPrepassBlurRadius: f32,
    pub minHitDistanceWeight: f32,
    pub minBlurRadius: f32,
    pub maxBlurRadius: f32,
    pub lobeAngleFraction: f32,
    pub roughnessFraction: f32,
    pub responsiveAccumulationRoughnessThreshold: f32,
    pub planeDistanceSensitivity: f32,
    pub specularProbabilityThresholdsForMvModification: [f32; 2usize],
    pub fireflySuppressorMinRelativeScale: f32,
    pub minMaterialForDiffuse: f32,
    pub minMaterialForSpecular: f32,
    pub checkerboardMode: nrd_CheckerboardMode,
    pub hitDistanceReconstructionMode: nrd_HitDistanceReconstructionMode,
    pub enableAntiFirefly: bool,
    pub usePrepassOnlyForSpecularMotionEstimation: bool,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of nrd_ReblurSettings"][::std::mem::size_of::<nrd_ReblurSettings>() - 104usize];
    ["Alignment of nrd_ReblurSettings"][::std::mem::align_of::<nrd_ReblurSettings>() - 4usize];
    ["Offset of field: nrd_ReblurSettings::hitDistanceParameters"]
        [::std::mem::offset_of!(nrd_ReblurSettings, hitDistanceParameters) - 0usize];
    ["Offset of field: nrd_ReblurSettings::antilagSettings"]
        [::std::mem::offset_of!(nrd_ReblurSettings, antilagSettings) - 16usize];
    ["Offset of field: nrd_ReblurSettings::maxAccumulatedFrameNum"]
        [::std::mem::offset_of!(nrd_ReblurSettings, maxAccumulatedFrameNum) - 24usize];
    ["Offset of field: nrd_ReblurSettings::maxFastAccumulatedFrameNum"]
        [::std::mem::offset_of!(nrd_ReblurSettings, maxFastAccumulatedFrameNum) - 28usize];
    ["Offset of field: nrd_ReblurSettings::maxStabilizedFrameNum"]
        [::std::mem::offset_of!(nrd_ReblurSettings, maxStabilizedFrameNum) - 32usize];
    ["Offset of field: nrd_ReblurSettings::historyFixFrameNum"]
        [::std::mem::offset_of!(nrd_ReblurSettings, historyFixFrameNum) - 36usize];
    ["Offset of field: nrd_ReblurSettings::historyFixBasePixelStride"]
        [::std::mem::offset_of!(nrd_ReblurSettings, historyFixBasePixelStride) - 40usize];
    ["Offset of field: nrd_ReblurSettings::diffusePrepassBlurRadius"]
        [::std::mem::offset_of!(nrd_ReblurSettings, diffusePrepassBlurRadius) - 44usize];
    ["Offset of field: nrd_ReblurSettings::specularPrepassBlurRadius"]
        [::std::mem::offset_of!(nrd_ReblurSettings, specularPrepassBlurRadius) - 48usize];
    ["Offset of field: nrd_ReblurSettings::minHitDistanceWeight"]
        [::std::mem::offset_of!(nrd_ReblurSettings, minHitDistanceWeight) - 52usize];
    ["Offset of field: nrd_ReblurSettings::minBlurRadius"]
        [::std::mem::offset_of!(nrd_ReblurSettings, minBlurRadius) - 56usize];
    ["Offset of field: nrd_ReblurSettings::maxBlurRadius"]
        [::std::mem::offset_of!(nrd_ReblurSettings, maxBlurRadius) - 60usize];
    ["Offset of field: nrd_ReblurSettings::lobeAngleFraction"]
        [::std::mem::offset_of!(nrd_ReblurSettings, lobeAngleFraction) - 64usize];
    ["Offset of field: nrd_ReblurSettings::roughnessFraction"]
        [::std::mem::offset_of!(nrd_ReblurSettings, roughnessFraction) - 68usize];
    ["Offset of field: nrd_ReblurSettings::responsiveAccumulationRoughnessThreshold"][::std::mem::offset_of!(
        nrd_ReblurSettings,
        responsiveAccumulationRoughnessThreshold
    ) - 72usize];
    ["Offset of field: nrd_ReblurSettings::planeDistanceSensitivity"]
        [::std::mem::offset_of!(nrd_ReblurSettings, planeDistanceSensitivity) - 76usize];
    ["Offset of field: nrd_ReblurSettings::specularProbabilityThresholdsForMvModification"][::std::mem::offset_of!(
        nrd_ReblurSettings,
        specularProbabilityThresholdsForMvModification
    )
        - 80usize];
    ["Offset of field: nrd_ReblurSettings::fireflySuppressorMinRelativeScale"]
        [::std::mem::offset_of!(nrd_ReblurSettings, fireflySuppressorMinRelativeScale) - 88usize];
    ["Offset of field: nrd_ReblurSettings::minMaterialForDiffuse"]
        [::std::mem::offset_of!(nrd_ReblurSettings, minMaterialForDiffuse) - 92usize];
    ["Offset of field: nrd_ReblurSettings::minMaterialForSpecular"]
        [::std::mem::offset_of!(nrd_ReblurSettings, minMaterialForSpecular) - 96usize];
    ["Offset of field: nrd_ReblurSettings::checkerboardMode"]
        [::std::mem::offset_of!(nrd_ReblurSettings, checkerboardMode) - 100usize];
    ["Offset of field: nrd_ReblurSettings::hitDistanceReconstructionMode"]
        [::std::mem::offset_of!(nrd_ReblurSettings, hitDistanceReconstructionMode) - 101usize];
    ["Offset of field: nrd_ReblurSettings::enableAntiFirefly"]
        [::std::mem::offset_of!(nrd_ReblurSettings, enableAntiFirefly) - 102usize];
    ["Offset of field: nrd_ReblurSettings::usePrepassOnlyForSpecularMotionEstimation"][::std::mem::offset_of!(
        nrd_ReblurSettings,
        usePrepassOnlyForSpecularMotionEstimation
    )
        - 103usize];
};
pub const nrd_RELAX_MAX_HISTORY_FRAME_NUM: u32 = 255;
pub const nrd_RELAX_DEFAULT_ACCUMULATION_TIME: f32 = 0.5;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct nrd_RelaxAntilagSettings {
    pub accelerationAmount: f32,
    pub spatialSigmaScale: f32,
    pub temporalSigmaScale: f32,
    pub resetAmount: f32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of nrd_RelaxAntilagSettings"]
        [::std::mem::size_of::<nrd_RelaxAntilagSettings>() - 16usize];
    ["Alignment of nrd_RelaxAntilagSettings"]
        [::std::mem::align_of::<nrd_RelaxAntilagSettings>() - 4usize];
    ["Offset of field: nrd_RelaxAntilagSettings::accelerationAmount"]
        [::std::mem::offset_of!(nrd_RelaxAntilagSettings, accelerationAmount) - 0usize];
    ["Offset of field: nrd_RelaxAntilagSettings::spatialSigmaScale"]
        [::std::mem::offset_of!(nrd_RelaxAntilagSettings, spatialSigmaScale) - 4usize];
    ["Offset of field: nrd_RelaxAntilagSettings::temporalSigmaScale"]
        [::std::mem::offset_of!(nrd_RelaxAntilagSettings, temporalSigmaScale) - 8usize];
    ["Offset of field: nrd_RelaxAntilagSettings::resetAmount"]
        [::std::mem::offset_of!(nrd_RelaxAntilagSettings, resetAmount) - 12usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct nrd_RelaxSettings {
    pub antilagSettings: nrd_RelaxAntilagSettings,
    pub diffuseMaxAccumulatedFrameNum: u32,
    pub specularMaxAccumulatedFrameNum: u32,
    pub diffuseMaxFastAccumulatedFrameNum: u32,
    pub specularMaxFastAccumulatedFrameNum: u32,
    pub historyFixFrameNum: u32,
    pub historyFixBasePixelStride: u32,
    pub historyFixEdgeStoppingNormalPower: f32,
    pub spatialVarianceEstimationHistoryThreshold: u32,
    pub diffusePrepassBlurRadius: f32,
    pub specularPrepassBlurRadius: f32,
    pub minHitDistanceWeight: f32,
    pub diffusePhiLuminance: f32,
    pub specularPhiLuminance: f32,
    pub lobeAngleFraction: f32,
    pub roughnessFraction: f32,
    pub specularVarianceBoost: f32,
    pub specularLobeAngleSlack: f32,
    pub historyClampingColorBoxSigmaScale: f32,
    pub atrousIterationNum: u32,
    pub diffuseMinLuminanceWeight: f32,
    pub specularMinLuminanceWeight: f32,
    pub depthThreshold: f32,
    pub confidenceDrivenRelaxationMultiplier: f32,
    pub confidenceDrivenLuminanceEdgeStoppingRelaxation: f32,
    pub confidenceDrivenNormalEdgeStoppingRelaxation: f32,
    pub luminanceEdgeStoppingRelaxation: f32,
    pub normalEdgeStoppingRelaxation: f32,
    pub roughnessEdgeStoppingRelaxation: f32,
    pub checkerboardMode: nrd_CheckerboardMode,
    pub hitDistanceReconstructionMode: nrd_HitDistanceReconstructionMode,
    pub minMaterialForDiffuse: f32,
    pub minMaterialForSpecular: f32,
    pub enableAntiFirefly: bool,
    pub enableRoughnessEdgeStopping: bool,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of nrd_RelaxSettings"][::std::mem::size_of::<nrd_RelaxSettings>() - 144usize];
    ["Alignment of nrd_RelaxSettings"][::std::mem::align_of::<nrd_RelaxSettings>() - 4usize];
    ["Offset of field: nrd_RelaxSettings::antilagSettings"]
        [::std::mem::offset_of!(nrd_RelaxSettings, antilagSettings) - 0usize];
    ["Offset of field: nrd_RelaxSettings::diffuseMaxAccumulatedFrameNum"]
        [::std::mem::offset_of!(nrd_RelaxSettings, diffuseMaxAccumulatedFrameNum) - 16usize];
    ["Offset of field: nrd_RelaxSettings::specularMaxAccumulatedFrameNum"]
        [::std::mem::offset_of!(nrd_RelaxSettings, specularMaxAccumulatedFrameNum) - 20usize];
    ["Offset of field: nrd_RelaxSettings::diffuseMaxFastAccumulatedFrameNum"]
        [::std::mem::offset_of!(nrd_RelaxSettings, diffuseMaxFastAccumulatedFrameNum) - 24usize];
    ["Offset of field: nrd_RelaxSettings::specularMaxFastAccumulatedFrameNum"]
        [::std::mem::offset_of!(nrd_RelaxSettings, specularMaxFastAccumulatedFrameNum) - 28usize];
    ["Offset of field: nrd_RelaxSettings::historyFixFrameNum"]
        [::std::mem::offset_of!(nrd_RelaxSettings, historyFixFrameNum) - 32usize];
    ["Offset of field: nrd_RelaxSettings::historyFixBasePixelStride"]
        [::std::mem::offset_of!(nrd_RelaxSettings, historyFixBasePixelStride) - 36usize];
    ["Offset of field: nrd_RelaxSettings::historyFixEdgeStoppingNormalPower"]
        [::std::mem::offset_of!(nrd_RelaxSettings, historyFixEdgeStoppingNormalPower) - 40usize];
    ["Offset of field: nrd_RelaxSettings::spatialVarianceEstimationHistoryThreshold"][::std::mem::offset_of!(
        nrd_RelaxSettings,
        spatialVarianceEstimationHistoryThreshold
    ) - 44usize];
    ["Offset of field: nrd_RelaxSettings::diffusePrepassBlurRadius"]
        [::std::mem::offset_of!(nrd_RelaxSettings, diffusePrepassBlurRadius) - 48usize];
    ["Offset of field: nrd_RelaxSettings::specularPrepassBlurRadius"]
        [::std::mem::offset_of!(nrd_RelaxSettings, specularPrepassBlurRadius) - 52usize];
    ["Offset of field: nrd_RelaxSettings::minHitDistanceWeight"]
        [::std::mem::offset_of!(nrd_RelaxSettings, minHitDistanceWeight) - 56usize];
    ["Offset of field: nrd_RelaxSettings::diffusePhiLuminance"]
        [::std::mem::offset_of!(nrd_RelaxSettings, diffusePhiLuminance) - 60usize];
    ["Offset of field: nrd_RelaxSettings::specularPhiLuminance"]
        [::std::mem::offset_of!(nrd_RelaxSettings, specularPhiLuminance) - 64usize];
    ["Offset of field: nrd_RelaxSettings::lobeAngleFraction"]
        [::std::mem::offset_of!(nrd_RelaxSettings, lobeAngleFraction) - 68usize];
    ["Offset of field: nrd_RelaxSettings::roughnessFraction"]
        [::std::mem::offset_of!(nrd_RelaxSettings, roughnessFraction) - 72usize];
    ["Offset of field: nrd_RelaxSettings::specularVarianceBoost"]
        [::std::mem::offset_of!(nrd_RelaxSettings, specularVarianceBoost) - 76usize];
    ["Offset of field: nrd_RelaxSettings::specularLobeAngleSlack"]
        [::std::mem::offset_of!(nrd_RelaxSettings, specularLobeAngleSlack) - 80usize];
    ["Offset of field: nrd_RelaxSettings::historyClampingColorBoxSigmaScale"]
        [::std::mem::offset_of!(nrd_RelaxSettings, historyClampingColorBoxSigmaScale) - 84usize];
    ["Offset of field: nrd_RelaxSettings::atrousIterationNum"]
        [::std::mem::offset_of!(nrd_RelaxSettings, atrousIterationNum) - 88usize];
    ["Offset of field: nrd_RelaxSettings::diffuseMinLuminanceWeight"]
        [::std::mem::offset_of!(nrd_RelaxSettings, diffuseMinLuminanceWeight) - 92usize];
    ["Offset of field: nrd_RelaxSettings::specularMinLuminanceWeight"]
        [::std::mem::offset_of!(nrd_RelaxSettings, specularMinLuminanceWeight) - 96usize];
    ["Offset of field: nrd_RelaxSettings::depthThreshold"]
        [::std::mem::offset_of!(nrd_RelaxSettings, depthThreshold) - 100usize];
    ["Offset of field: nrd_RelaxSettings::confidenceDrivenRelaxationMultiplier"][::std::mem::offset_of!(
        nrd_RelaxSettings,
        confidenceDrivenRelaxationMultiplier
    ) - 104usize];
    ["Offset of field: nrd_RelaxSettings::confidenceDrivenLuminanceEdgeStoppingRelaxation"][::std::mem::offset_of!(
        nrd_RelaxSettings,
        confidenceDrivenLuminanceEdgeStoppingRelaxation
    )
        - 108usize];
    ["Offset of field: nrd_RelaxSettings::confidenceDrivenNormalEdgeStoppingRelaxation"][::std::mem::offset_of!(
        nrd_RelaxSettings,
        confidenceDrivenNormalEdgeStoppingRelaxation
    )
        - 112usize];
    ["Offset of field: nrd_RelaxSettings::luminanceEdgeStoppingRelaxation"]
        [::std::mem::offset_of!(nrd_RelaxSettings, luminanceEdgeStoppingRelaxation) - 116usize];
    ["Offset of field: nrd_RelaxSettings::normalEdgeStoppingRelaxation"]
        [::std::mem::offset_of!(nrd_RelaxSettings, normalEdgeStoppingRelaxation) - 120usize];
    ["Offset of field: nrd_RelaxSettings::roughnessEdgeStoppingRelaxation"]
        [::std::mem::offset_of!(nrd_RelaxSettings, roughnessEdgeStoppingRelaxation) - 124usize];
    ["Offset of field: nrd_RelaxSettings::checkerboardMode"]
        [::std::mem::offset_of!(nrd_RelaxSettings, checkerboardMode) - 128usize];
    ["Offset of field: nrd_RelaxSettings::hitDistanceReconstructionMode"]
        [::std::mem::offset_of!(nrd_RelaxSettings, hitDistanceReconstructionMode) - 129usize];
    ["Offset of field: nrd_RelaxSettings::minMaterialForDiffuse"]
        [::std::mem::offset_of!(nrd_RelaxSettings, minMaterialForDiffuse) - 132usize];
    ["Offset of field: nrd_RelaxSettings::minMaterialForSpecular"]
        [::std::mem::offset_of!(nrd_RelaxSettings, minMaterialForSpecular) - 136usize];
    ["Offset of field: nrd_RelaxSettings::enableAntiFirefly"]
        [::std::mem::offset_of!(nrd_RelaxSettings, enableAntiFirefly) - 140usize];
    ["Offset of field: nrd_RelaxSettings::enableRoughnessEdgeStopping"]
        [::std::mem::offset_of!(nrd_RelaxSettings, enableRoughnessEdgeStopping) - 141usize];
};
pub const nrd_SIGMA_MAX_HISTORY_FRAME_NUM: u32 = 7;
pub const nrd_SIGMA_DEFAULT_ACCUMULATION_TIME: f32 = 0.08399999886751175;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct nrd_SigmaSettings {
    pub lightDirection: [f32; 3usize],
    pub planeDistanceSensitivity: f32,
    pub maxStabilizedFrameNum: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of nrd_SigmaSettings"][::std::mem::size_of::<nrd_SigmaSettings>() - 20usize];
    ["Alignment of nrd_SigmaSettings"][::std::mem::align_of::<nrd_SigmaSettings>() - 4usize];
    ["Offset of field: nrd_SigmaSettings::lightDirection"]
        [::std::mem::offset_of!(nrd_SigmaSettings, lightDirection) - 0usize];
    ["Offset of field: nrd_SigmaSettings::planeDistanceSensitivity"]
        [::std::mem::offset_of!(nrd_SigmaSettings, planeDistanceSensitivity) - 12usize];
    ["Offset of field: nrd_SigmaSettings::maxStabilizedFrameNum"]
        [::std::mem::offset_of!(nrd_SigmaSettings, maxStabilizedFrameNum) - 16usize];
};
pub const nrd_REFERENCE_MAX_HISTORY_FRAME_NUM: u32 = 4095;
pub const nrd_REFERENCE_DEFAULT_ACCUMULATION_TIME: f32 = 17.0;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct nrd_ReferenceSettings {
    pub maxAccumulatedFrameNum: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of nrd_ReferenceSettings"][::std::mem::size_of::<nrd_ReferenceSettings>() - 4usize];
    ["Alignment of nrd_ReferenceSettings"]
        [::std::mem::align_of::<nrd_ReferenceSettings>() - 4usize];
    ["Offset of field: nrd_ReferenceSettings::maxAccumulatedFrameNum"]
        [::std::mem::offset_of!(nrd_ReferenceSettings, maxAccumulatedFrameNum) - 0usize];
};
unsafe extern "C" {
    #[link_name = "\u{1}CreateInstance"]
    pub fn nrd_CreateInstance(
        instanceCreationDesc: *const nrd_InstanceCreationDesc,
        instance: *mut *mut nrd_Instance,
    ) -> nrd_Result;
}
unsafe extern "C" {
    #[link_name = "\u{1}DestroyInstance"]
    pub fn nrd_DestroyInstance(instance: *mut nrd_Instance);
}
unsafe extern "C" {
    #[link_name = "\u{1}GetLibraryDesc"]
    pub fn nrd_GetLibraryDesc() -> *const nrd_LibraryDesc;
}
unsafe extern "C" {
    #[link_name = "\u{1}GetInstanceDesc"]
    pub fn nrd_GetInstanceDesc(instance: *const nrd_Instance) -> *const nrd_InstanceDesc;
}
unsafe extern "C" {
    #[link_name = "\u{1}SetCommonSettings"]
    pub fn nrd_SetCommonSettings(
        instance: *mut nrd_Instance,
        commonSettings: *const nrd_CommonSettings,
    ) -> nrd_Result;
}
unsafe extern "C" {
    #[link_name = "\u{1}SetDenoiserSettings"]
    pub fn nrd_SetDenoiserSettings(
        instance: *mut nrd_Instance,
        identifier: nrd_Identifier,
        denoiserSettings: *const ::std::os::raw::c_void,
    ) -> nrd_Result;
}
unsafe extern "C" {
    #[link_name = "\u{1}GetComputeDispatches"]
    pub fn nrd_GetComputeDispatches(
        instance: *mut nrd_Instance,
        identifiers: *const nrd_Identifier,
        identifiersNum: u32,
        dispatchDescs: *mut *const nrd_DispatchDesc,
        dispatchDescsNum: *mut u32,
    ) -> nrd_Result;
}
unsafe extern "C" {
    #[link_name = "\u{1}GetResourceTypeString"]
    pub fn nrd_GetResourceTypeString(
        resourceType: nrd_ResourceType,
    ) -> *const ::std::os::raw::c_char;
}
unsafe extern "C" {
    #[link_name = "\u{1}GetDenoiserString"]
    pub fn nrd_GetDenoiserString(denoiser: nrd_Denoiser) -> *const ::std::os::raw::c_char;
}
